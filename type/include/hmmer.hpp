#ifndef PTA_GRAPHS_HPP
#define PTA_GRAPHS_HPP

#include "lhf/lhf.hpp"
#include <map>
#include <vector>
#include <string>

namespace PTA{

    using FuncDataT = std::string;

    struct PtrDataT {
        std::string var;
        std::string scope;
        std::string line;

        bool operator<(const PtrDataT& rhs) const {
            return std::tie(var, scope, line) < std::tie(rhs.var, rhs.scope, rhs.line);
        }
    };
    using NodeIdT = unsigned int;
    using EdgeT = std::pair<NodeIdT, NodeIdT>;

    enum IndexType {
        NODE_FOREST = 1,
        EDGE_FOREST = 2,
    };


    template<typename NodeDataT, typename DerivedGraphT>
    class BaseGraphAPI {
    protected:
        using NodePropertyT = unsigned int;
        using EdgePropertyT = long long;

        using NodeHashForest = lhf::LatticeHashForest<NodePropertyT>;
        using EdgeHashForest = lhf::LatticeHashForest<EdgePropertyT>;
    
        EdgeHashForest edgeForest;
        NodeHashForest nodeForest;
    
        inline const std::vector<EdgeT>& getGraph() const {
            return static_cast<const DerivedGraphT*>(this)->getGraph();
        }

        inline const std::map<NodeDataT, NodeIdT>& getNodeMap() const {
            return static_cast<const DerivedGraphT*>(this)->getNodeMap();
        }
    
        EdgePropertyT getEdgeProperty(const EdgeT& edge) const {
            const std::vector<EdgeT>& graph = getGraph();
            if (std::find(graph.begin(), graph.end(), edge) == graph.end()) {
                throw std::out_of_range("Invalid Edge");
            }
            EdgePropertyT property = (static_cast<EdgePropertyT>(edge.first) << 32) | static_cast<EdgePropertyT>(edge.second);
            return property;
        }
    
        EdgeT getEdge(const EdgePropertyT& edge_property) const {
            NodeIdT src = static_cast<NodeIdT>(edge_property >> 32);
            NodeIdT dst = static_cast<NodeIdT>(edge_property & 0xFFFFFFFF);
            return {src, dst};
        }
    
    public:
        inline NodeIdT getNodeId(const NodeDataT& node) const {
            auto it = getNodeMap().find(node);
            return (it != getNodeMap().end()) ? it->second : -1;
        }

        inline const NodeDataT& getNodeDetails(NodeIdT node_id) const {
            for (const auto& [node, nodeId] : getNodeMap()) {
                if (nodeId == node_id) {
                    return node;
                }
            }
            throw std::out_of_range("NodeID not found in node_map");
        }

        inline lhf::Index getEmptySetIndex() const {
            return lhf::EMPTY_SET;
        }
    
        inline bool is_empty(lhf::Index i) {
            return edgeForest.is_empty(i);
        }
    
        inline bool is_subset(IndexType indexType, lhf::Index a, lhf::Index b) {
            if (indexType == EDGE_FOREST) {
                return edgeForest.is_subset(a, b) == EdgeHashForest::SubsetRelation::SUBSET;
            } else if (indexType == NODE_FOREST) {
                return nodeForest.is_subset(a, b) == NodeHashForest::SubsetRelation::SUBSET;
            }
            throw std::invalid_argument("Invalid index type");
        }

        inline bool is_superset(IndexType indexType, lhf::Index a, lhf::Index b) {
            if (indexType == EDGE_FOREST) {
                return edgeForest.is_subset(a, b) == EdgeHashForest::SubsetRelation::SUPERSET;
            } else if (indexType == NODE_FOREST) {
                return nodeForest.is_subset(a, b) == NodeHashForest::SubsetRelation::SUPERSET;
            }
            throw std::invalid_argument("Invalid index type");
        }
    
        inline lhf::Index getEdgeIndex(const EdgeT& edge) {
            return edgeForest.register_set_single(getEdgeProperty(edge));
        }
    
        inline lhf::Index getEdgeIndex(const EdgeT& edge, bool &cold) {
            return edgeForest.register_set_single(getEdgeProperty(edge), cold);
        }
    
        inline const EdgeHashForest::PropertySet &get_value_edge(lhf::Index idx) const {
            return edgeForest.get_value(idx);
        }

        inline const NodeHashForest::PropertySet &get_value_node(lhf::Index idx) const {
            return nodeForest.get_value(idx);
        }
    
        inline std::size_t size_of(IndexType indexType, lhf::Index idx) const {
            if (indexType == EDGE_FOREST) {
                return edgeForest.size_of(idx);
            } else if (indexType == NODE_FOREST) {
                return nodeForest.size_of(idx);
            }
            throw std::invalid_argument("Invalid index type");
        }
    
        inline bool contains(lhf::Index idx, const EdgeT& edge) const {
            return edgeForest.contains(idx, getEdgeProperty(edge));
        }

        inline bool contains(lhf::Index idx, const NodeIdT& node) const {
            return nodeForest.contains(idx, node);
        }
    
        inline lhf::Index set_union(IndexType indexType, lhf::Index a, lhf::Index b) {
            if (indexType == EDGE_FOREST) {
                return edgeForest.set_union(a, b);
            } else if (indexType == NODE_FOREST) {
                return nodeForest.set_union(a, b);
            }
            throw std::invalid_argument("Invalid index type");
        }
    
        inline lhf::Index set_insert_single(lhf::Index a, const EdgeT& edge) {
            return edgeForest.set_insert_single(a, getEdgeProperty(edge));
        }

        inline lhf::Index set_insert_single(lhf::Index a, const NodeIdT& node) {
            return nodeForest.set_insert_single(a, node);
        }
    
        inline lhf::Index set_remove_single(lhf::Index a, const EdgeT& edge) {
            return edgeForest.set_remove_single(a, getEdgeProperty(edge));
        }

        inline lhf::Index set_remove_single(lhf::Index a, const NodeIdT& node) {
            return nodeForest.set_remove_single(a, node);
        }
    
        inline lhf::Index set_difference(IndexType indexType, lhf::Index a, lhf::Index b) {
            if (indexType == EDGE_FOREST) {
                return edgeForest.set_difference(a, b);
            } else if (indexType == NODE_FOREST) {
                return nodeForest.set_difference(a, b);
            }
            throw std::invalid_argument("Invalid index type");
        }
    
        inline lhf::Index set_intersection(IndexType indexType, lhf::Index a, lhf::Index b) {
            if (indexType == EDGE_FOREST) {
                return edgeForest.set_intersection(a, b);
            } else if (indexType == NODE_FOREST) {
                return nodeForest.set_intersection(a, b);
            }
            throw std::invalid_argument("Invalid index type");
        }
    
        inline const NodeHashForest::PropertySet& get_value_points_to(lhf::Index idx) const {
            return nodeForest.get_value(idx);
        }
    
        lhf::Index get_points_to_set(lhf::Index a, NodeIdT node_id) {
            EdgeHashForest::PropertySet property_set = edgeForest.get_value(a);
            std::vector<NodeIdT> result;
            for (EdgePropertyT property : property_set) {
                EdgeT edge = getEdge(property);
                if (edge.first == node_id) {
                    result.push_back(edge.second);
                }
            }
            return nodeForest.register_set(result);
        }
    
        lhf::Index get_points_to_set(lhf::Index a, const std::vector<NodeIdT>& node_ids) {
            lhf::Index result = getEmptySetIndex();
            for (NodeIdT node_id : node_ids) {
                lhf::Index index = get_points_to_set(a, node_id);
                result = nodeForest.set_union(result, index);
            }
            return result;
        }
    
        lhf::Index get_points_to_set(lhf::Index a, lhf::Index idx) {
            return get_points_to_set(a, get_value_points_to(idx));
        }
    
        lhf::Index get_points_to_set(lhf::Index a, NodeIdT node_id, unsigned int recursion_depth) {
            if (recursion_depth == 0) return {};
            lhf::Index result = get_points_to_set(a, node_id);
            for (int i = 1; i < recursion_depth; i++) {
                result = get_points_to_set(a, result);
                if (nodeForest.is_empty(result)) break;
            }
            return result;
        }
    
        lhf::Index get_points_to_set(lhf::Index a, const std::vector<NodeIdT>& node_ids, unsigned int recursion_depth) {
            if (recursion_depth == 0) return {};
            lhf::Index result = get_points_to_set(a, node_ids);
            for (int i = 1; i < recursion_depth; i++) {
                result = get_points_to_set(a, result);
                if (nodeForest.is_empty(result)) break;
            }
            return result;
        }
    
        void print_points_to_set(lhf::Index idx) const {
            const auto& set = nodeForest.get_value(idx);
            std::cout << "Points-to set (Index = " << idx << "): (";
            for (const auto& v : set) std::cout << v << ", ";
            std::cout << ")" << std::endl;
        }
    };


    class CallGraph : public BaseGraphAPI<FuncDataT, CallGraph> {
    private:
        // Mapping from NodeData to ID
        const std::map<FuncDataT, NodeIdT> node_map = {
            {"DetermineAlphabet", 0},
            {"SetAlphabet", 1},
            {"set_degenerate", 2},
            {"SymbolIndex", 3},
            {"DigitizeSequence", 4},
            {"DedigitizeSequence", 5},
            {"DigitizeAlignment", 6},
            {"P7CountSymbol", 7},
            {"DefaultGeneticCode", 8},
            {"DefaultCodonBias", 9},
            {"CreatePlan7Matrix", 10},
            {"ResizePlan7Matrix", 11},
            {"AllocPlan7Matrix", 12},
            {"FreePlan7Matrix", 13},
            {"AllocShadowMatrix", 14},
            {"FreeShadowMatrix", 15},
            {"P7ViterbiSize", 16},
            {"P7SmallViterbiSize", 17},
            {"P7WeeViterbiSize", 18},
            {"P7Forward", 19},
            {"P7ViterbiTrace", 20},
            {"P7SmallViterbi", 21},
            {"P7ParsingViterbi", 22},
            {"P7WeeViterbi", 23},
            {"get_wee_midpt", 24},
            {"Plan7ESTViterbi", 25},
            {"P7ViterbiAlignAlignment", 26},
            {"ShadowTrace", 27},
            {"PostprocessSignificantHit", 28},
            {"Statetype", 29},
            {"AlphabetType2String", 30},
            {"P7PrintTrace", 31},
            {"P7PrintPrior", 32},
            {"TraceVerify", 33},
            {"TraceCompare", 34},
            {"DisplayPlan7Posteriors", 35},
            {"DisplayPlan7PostAlign", 36},
            {"PrintTransition", 37},
            {"DisplayPlan7Matrix", 38},
            {"PrintIscore", 39},
            {"EmitSequence", 40},
            {"EmitConsensusSequence", 41},
            {"StateOccupancy", 42},
            {"WriteProfile", 43},
            {"P7Viterbi", 44},
            {"AllocHistogram", 45},
            {"FreeHistogram", 46},
            {"UnfitHistogram", 47},
            {"AddToHistogram", 48},
            {"PrintASCIIHistogram", 49},
            {"PrintXMGRHistogram", 50},
            {"ExtremeValueP", 51},
            {"PrintXMGRDistribution", 52},
            {"PrintXMGRRegressionLine", 53},
            {"EVDBasicFit", 54},
            {"ExtremeValueSetHistogram", 55},
            {"ExtremeValueE", 56},
            {"ExtremeValueFitHistogram", 57},
            {"EVDDistribution", 58},
            {"EVDCensoredFit", 59},
            {"EVDMaxLikelyFit", 60},
            {"Lawless416", 61},
            {"Lawless422", 62},
            {"GaussianFitHistogram", 63},
            {"GaussianSetHistogram", 64},
            {"EVDDensity", 65},
            {"ExtremeValueP2", 66},
            {"EVDrandom", 67},
            {"HMMFileOpen", 68},
            {"HMMFileClose", 69},
            {"read_bin20hmm", 70},
            {"read_bin19hmm", 71},
            {"read_bin17hmm", 72},
            {"read_bin11hmm", 73},
            {"read_bin10hmm", 74},
            {"read_asc20hmm", 75},
            {"read_asc19hmm", 76},
            {"read_asc17hmm", 77},
            {"read_asc11hmm", 78},
            {"read_asc10hmm", 79},
            {"read_plan9_aschmm", 80},
            {"ascii2prob", 81},
            {"read_plan9_binhmm", 82},
            {"byteswap", 83},
            {"read_bin_string", 84},
            {"HMMFileRead", 85},
            {"HMMFileRewind", 86},
            {"HMMFilePositionByName", 87},
            {"HMMFilePositionByIndex", 88},
            {"WriteAscHMM", 89},
            {"multiline", 90},
            {"prob2ascii", 91},
            {"WriteBinHMM", 92},
            {"write_bin_string", 93},
            {"hmmcalibrate", 94},
            {"main_loop_serial", 95},
            {"main", 96},
            {"main_loop_pvm", 97},
            {"main_loop_threaded", 98},
            {"main_loop_serial.298", 99},
            {"Prob2Score", 100},
            {"Score2Prob", 101},
            {"Scorify", 102},
            {"PValue", 103},
            {"LogSum", 104},
            {"ILogsum", 105},
            {"init_ilogsum", 106},
            {"LogNorm", 107},
            {"Logp_cvec", 108},
            {"SampleDirichlet", 109},
            {"SampleGamma", 110},
            {"SampleCountvector", 111},
            {"P_PvecGivenDirichlet", 112},
            {"XNU", 113},
            {"TraceScoreCorrection", 114},
            {"SantaCruzCorrection", 115},
            {"HMMERBanner", 116},
            {"Getword", 117},
            {"Getline", 118},
            {"SetAutocuts", 119},
            {"P7Handmodelmaker", 120},
            {"matassign2hmm", 121},
            {"fake_tracebacks", 122},
            {"annotate_model", 123},
            {"trace_doctor", 124},
            {"P7Fastmodelmaker", 125},
            {"P7Maxmodelmaker", 126},
            {"estimate_model_length", 127},
            {"build_cij", 128},
            {"AllocPlan7", 129},
            {"AllocPlan7Shell", 130},
            {"AllocPlan7Body", 131},
            {"FreePlan7", 132},
            {"ZeroPlan7", 133},
            {"Plan7SetName", 134},
            {"Plan7SetAccession", 135},
            {"Plan7SetDescription", 136},
            {"Plan7ComlogAppend", 137},
            {"Plan7SetCtime", 138},
            {"Plan7SetNullModel", 139},
            {"P7Logoddsify", 140},
            {"DegenerateSymbolScore", 141},
            {"Plan7Renormalize", 142},
            {"Plan7RenormalizeExits", 143},
            {"Plan7NakedConfig", 144},
            {"Plan7GlobalConfig", 145},
            {"Plan7LSConfig", 146},
            {"Plan7SWConfig", 147},
            {"Plan7FSConfig", 148},
            {"Plan7ESTConfig", 149},
            {"PrintPlan7Stats", 150},
            {"Plan9toPlan7", 151},
            {"P9AllocHMM", 152},
            {"P9ZeroHMM", 153},
            {"P9FreeHMM", 154},
            {"P9Renormalize", 155},
            {"P9DefaultNullModel", 156},
            {"P7OptimalAccuracy", 157},
            {"P7Backward", 158},
            {"P7EmitterPosterior", 159},
            {"P7FillOptimalAccuracy", 160},
            {"P7OptimalAccuracyTrace", 161},
            {"PostalCode", 162},
            {"score2postcode", 163},
            {"P7AllocPrior", 164},
            {"P7FreePrior", 165},
            {"P7LaplacePrior", 166},
            {"P7DefaultPrior", 167},
            {"default_amino_prior", 168},
            {"default_nucleic_prior", 169},
            {"P7ReadPrior", 170},
            {"PAMPrior", 171},
            {"P7DefaultNullModel", 172},
            {"P7ReadNullModel", 173},
            {"P7PriorifyHMM", 174},
            {"P7PriorifyTransitionVector", 175},
            {"P7PriorifyEmissionVector", 176},
            {"AllocTophits", 177},
            {"GrowTophits", 178},
            {"FreeTophits", 179},
            {"FreeFancyAli", 180},
            {"AllocFancyAli", 181},
            {"RegisterHit", 182},
            {"GetRankedHit", 183},
            {"TophitsMaxName", 184},
            {"hit_comparison", 185},
            {"FullSortTophits", 186},
            {"TophitsReport", 187},
            {"P7AllocTrace", 188},
            {"P7ReallocTrace", 189},
            {"P7FreeTrace", 190},
            {"TraceSet", 191},
            {"MergeTraceArrays", 192},
            {"P7ReverseTrace", 193},
            {"P7TraceCount", 194},
            {"P7TraceScore", 195},
            {"TransitionScoreLookup", 196},
            {"P7Traces2Alignment", 197},
            {"rightjustify", 198},
            {"CreateFancyAli", 199},
            {"PrintFancyAli", 200},
            {"TraceDecompose", 201},
            {"TraceDomainNumber", 202},
            {"TraceSimpleBounds", 203},
            {"MasterTraceFromMap", 204},
            {"ImposeMasterTrace", 205},
            {"specqsort", 206},
            {"qst", 207},
            {"ReadA2M", 208},
            {"WriteA2M", 209},
            {"ComparePairAlignments", 210},
            {"make_alilist", 211},
            {"compare_lists", 212},
            {"CompareRefPairAlignments", 213},
            {"make_ref_alilist", 214},
            {"CompareMultAlignments", 215},
            {"CompareRefMultAlignments", 216},
            {"PairwiseIdentity", 217},
            {"AlignmentIdentityBySampling", 218},
            {"MajorityRuleConsensus", 219},
            {"AllocAlignment", 220},
            {"InitAinfo", 221},
            {"FreeAlignment", 222},
            {"SAMizeAlignment", 223},
            {"SAMizeAlignmentByGapFrac", 224},
            {"MakeAlignedString", 225},
            {"MakeDealignedString", 226},
            {"DealignedLength", 227},
            {"WritePairwiseAlignment", 228},
            {"MingapAlignment", 229},
            {"RandomAlignment", 230},
            {"AlignmentHomogenousGapsym", 231},
            {"ReadClustal", 232},
            {"WriteClustal", 233},
            {"Cluster", 234},
            {"AllocPhylo", 235},
            {"FreePhylo", 236},
            {"MakeDiffMx", 237},
            {"MakeIdentityMx", 238},
            {"PrintNewHampshireTree", 239},
            {"PrintPhylo", 240},
            {"ParsePAMFile", 241},
            {"EPSWriteSmallMSA", 242},
            {"FileDirname", 243},
            {"FileTail", 244},
            {"FileSameDirectory", 245},
            {"FileConcat", 246},
            {"FileAddSuffix", 247},
            {"EnvFileOpen", 248},
            {"FileExists", 249},
            {"Getopt", 250},
            {"GKIInit", 251},
            {"gki_alloc", 252},
            {"GKIFree", 253},
            {"GKIStoreKey", 254},
            {"gki_hashvalue", 255},
            {"gki_upsize", 256},
            {"GKIKeyIndex", 257},
            {"GKIStatus", 258},
            {"GSIOpen", 259},
            {"GSIGetRecord", 260},
            {"GSIGetOffset", 261},
            {"GSIClose", 262},
            {"GSIAllocIndex", 263},
            {"GSIFreeIndex", 264},
            {"GSIAddFileToIndex", 265},
            {"GSIAddKeyToIndex", 266},
            {"GSISortIndex", 267},
            {"gsi_keysorter", 268},
            {"GSIWriteIndex", 269},
            {"GSIWriteHeader", 270},
            {"GSIWriteFileRecord", 271},
            {"GSIWriteKeyRecord", 272},
            {"Strparse", 273},
            {"sqd_regcomp", 274},
            {"sqd_regexec", 275},
            {"sqd_regerror", 276},
            {"regtry", 277},
            {"regmatch", 278},
            {"regnext", 279},
            {"regrepeat", 280},
            {"regc", 281},
            {"reg", 282},
            {"regnode", 283},
            {"regbranch", 284},
            {"regtail", 285},
            {"regoptail", 286},
            {"regpiece", 287},
            {"regatom", 288},
            {"reginsert", 289},
            {"SqdClean", 290},
            {"sqd_regsub", 291},
            {"MSAAlloc", 292},
            {"MSAExpand", 293},
            {"MSAFree", 294},
            {"MSASetSeqAccession", 295},
            {"MSASetSeqDescription", 296},
            {"MSAAddComment", 297},
            {"MSAAddGF", 298},
            {"MSAAddGS", 299},
            {"MSAAppendGC", 300},
            {"MSAGetGC", 301},
            {"MSAAppendGR", 302},
            {"MSAVerifyParse", 303},
            {"MSAFileOpen", 304},
            {"MSAFileFormat", 305},
            {"MSAFileRewind", 306},
            {"MSAFilePositionByKey", 307},
            {"MSAFilePositionByIndex", 308},
            {"MSAFileRead", 309},
            {"MSAFileClose", 310},
            {"MSAFileGetLine", 311},
            {"MSAFileWrite", 312},
            {"MSAGetSeqidx", 313},
            {"MSAFromAINFO", 314},
            {"MSAMingap", 315},
            {"MSAShorterAlignment", 316},
            {"MSANogap", 317},
            {"MSASmallerAlignment", 318},
            {"MSAGetSeqAccession", 319},
            {"MSAGetSeqDescription", 320},
            {"MSAGetSeqSS", 321},
            {"MSAGetSeqSA", 322},
            {"MSAAverageSequenceLength", 323},
            {"ReadMSF", 324},
            {"WriteMSF", 325},
            {"ReadPhylip", 326},
            {"WritePhylip", 327},
            {"revcomp", 328},
            {"rkcomp", 329},
            {"rkseq", 330},
            {"ReadSELEX", 331},
            {"copy_alignment_line", 332},
            {"WriteSELEX", 333},
            {"actually_write_selex", 334},
            {"WriteSELEXOneBlock", 335},
            {"DealignAseqs", 336},
            {"IsSELEXFormat", 337},
            {"seqcmp", 338},
            {"seqncmp", 339},
            {"seqencode", 340},
            {"coded_revcomp", 341},
            {"seqdecode", 342},
            {"seqndecode", 343},
            {"StrShuffle", 344},
            {"StrDPShuffle", 345},
            {"StrMarkov0", 346},
            {"StrMarkov1", 347},
            {"StrReverse", 348},
            {"StrRegionalShuffle", 349},
            {"AlignmentShuffle", 350},
            {"AlignmentBootstrap", 351},
            {"QRNAShuffle", 352},
            {"Die", 353},
            {"Warn", 354},
            {"Panic", 355},
            {"SeqfileOpen", 356},
            {"seqfile_open", 357},
            {"SeqfileFormat", 358},
            {"SeqfileGetLine", 359},
            {"Seqtype", 360},
            {"SeqfileOpenForIndexing", 361},
            {"SeqfilePosition", 362},
            {"SeqfileRewind", 363},
            {"SeqfileLineParameters", 364},
            {"SeqfileClose", 365},
            {"FreeSequence", 366},
            {"SetSeqinfoString", 367},
            {"SeqinfoCopy", 368},
            {"ToDNA", 369},
            {"ToRNA", 370},
            {"ToIUPAC", 371},
            {"ReadSeq", 372},
            {"readIG", 373},
            {"readStrider", 374},
            {"readGenBank", 375},
            {"readPearson", 376},
            {"readEMBL", 377},
            {"readZuker", 378},
            {"readPIR", 379},
            {"readGCGdata", 380},
            {"readUWGCG", 381},
            {"addseq", 382},
            {"GCGBinaryToSequence", 383},
            {"endGCGdata", 384},
            {"readLoop", 385},
            {"endPIR", 386},
            {"endZuker", 387},
            {"endEMBL", 388},
            {"endPearson", 389},
            {"endGB", 390},
            {"endStrider", 391},
            {"endIG", 392},
            {"GCGchecksum", 393},
            {"GCGMultchecksum", 394},
            {"GuessAlignmentSeqtype", 395},
            {"WriteSimpleFASTA", 396},
            {"WriteSeq", 397},
            {"ReadMultipleRseqs", 398},
            {"String2SeqfileFormat", 399},
            {"SeqfileFormat2String", 400},
            {"MSAToSqinfo", 401},
            {"SqdBanner", 402},
            {"sre_tolower", 403},
            {"sre_toupper", 404},
            {"Linefit", 405},
            {"WeightedLinefit", 406},
            {"Gammln", 407},
            {"FMX2Alloc", 408},
            {"FMX2Free", 409},
            {"DMX2Alloc", 410},
            {"DMX2Free", 411},
            {"FMX2Multiply", 412},
            {"IncompleteGamma", 413},
            {"sre_random", 414},
            {"sre_srandom", 415},
            {"sre_random_positive", 416},
            {"ExponentialRandom", 417},
            {"Gaussrandom", 418},
            {"DChoose", 419},
            {"FChoose", 420},
            {"Strdup", 421},
            {"StringChop", 422},
            {"Strinsert", 423},
            {"Strdelete", 424},
            {"s2lower", 425},
            {"s2upper", 426},
            {"sre_malloc", 427},
            {"sre_realloc", 428},
            {"Free2DArray", 429},
            {"Free3DArray", 430},
            {"RandomSequence", 431},
            {"sre_fgets", 432},
            {"sre_strcat", 433},
            {"sre_strtok", 434},
            {"sre_strdup", 435},
            {"sre_strncpy", 436},
            {"IsBlankline", 437},
            {"SSIOpen", 438},
            {"load_indexfile", 439},
            {"read_i32", 440},
            {"read_i16", 441},
            {"read_offset", 442},
            {"indexfile_position", 443},
            {"SSIClose", 444},
            {"clear_ssifile", 445},
            {"SSISetFilePosition", 446},
            {"read_i64", 447},
            {"SSIGetOffsetByName", 448},
            {"binary_search", 449},
            {"SSIGetOffsetByNumber", 450},
            {"SSIGetSubseqOffset", 451},
            {"SSIFileInfo", 452},
            {"SSIRecommendMode", 453},
            {"SSICreateIndex", 454},
            {"SSIFreeIndex", 455},
            {"SSIGetFilePosition", 456},
            {"SSIAddFileToIndex", 457},
            {"SSISetFileForSubseq", 458},
            {"SSIAddPrimaryKeyToIndex", 459},
            {"current_index_size", 460},
            {"activate_external_sort", 461},
            {"SSIAddSecondaryKeyToIndex", 462},
            {"SSIWriteIndex", 463},
            {"pkeysort", 464},
            {"skeysort", 465},
            {"write_i32", 466},
            {"write_i16", 467},
            {"write_i64", 468},
            {"parse_pkey_info", 469},
            {"write_offset", 470},
            {"parse_skey_info", 471},
            {"SSIErrorString", 472},
            {"SSIForceExternalSort", 473},
            {"InitIntStack", 474},
            {"PushIntStack", 475},
            {"PopIntStack", 476},
            {"ReverseIntStack", 477},
            {"FreeIntStack", 478},
            {"ReadStockholm", 479},
            {"parse_gf", 480},
            {"parse_gs", 481},
            {"parse_gc", 482},
            {"parse_gr", 483},
            {"parse_comment", 484},
            {"parse_sequence", 485},
            {"WriteStockholm", 486},
            {"actually_write_stockholm", 487},
            {"WriteStockholmOneBlock", 488},
            {"Translate", 489},
            {"IsInt", 490},
            {"IsReal", 491},
            {"Byteswap", 492},
            {"sre_ntoh16", 493},
            {"sre_ntoh32", 494},
            {"sre_hton16", 495},
            {"sre_hton32", 496},
            {"sre_ntoh64", 497},
            {"sre_hton64", 498},
            {"DSet", 499},
            {"FSet", 500},
            {"DScale", 501},
            {"FScale", 502},
            {"DSum", 503},
            {"FSum", 504},
            {"DAdd", 505},
            {"FAdd", 506},
            {"DCopy", 507},
            {"FCopy", 508},
            {"DDot", 509},
            {"FDot", 510},
            {"DMax", 511},
            {"FMax", 512},
            {"DMin", 513},
            {"FMin", 514},
            {"DArgMax", 515},
            {"FArgMax", 516},
            {"DArgMin", 517},
            {"FArgMin", 518},
            {"DNorm", 519},
            {"FNorm", 520},
            {"DLog", 521},
            {"FLog", 522},
            {"DExp", 523},
            {"FExp", 524},
            {"DLogSum", 525},
            {"FLogSum", 526},
            {"GSCWeights", 527},
            {"upweight", 528},
            {"downweight", 529},
            {"VoronoiWeights", 530},
            {"simple_diffmx", 531},
            {"simple_distance", 532},
            {"BlosumWeights", 533},
            {"SingleLinkCluster", 534},
            {"PositionBasedWeights", 535},
            {"FilterAlignment", 536},
            {"SampleAlignment", 537},
            {"strtok", 538},
            {"strrchr", 539},
            {"__ctype_b_loc", 540},
            {"fgets", 541},
            {"strchr", 542},
            {"strtoul", 543},
            {"strstr", 544},
            {"strpbrk", 545},
            {"localtime", 546},
            {"llvm.dbg.declare", 547},
            {"strcpy", 548},
            {"strlen", 549},
            {"toupper", 550},
            {"llvm.dbg.label", 551},
            {"free", 552},
            {"llvm.fmuladd.f64", 553},
            {"llvm.fmuladd.f32", 554},
            {"log", 555},
            {"fprintf", 556},
            {"tolower", 557},
            {"fputs", 558},
            {"calloc", 559},
            {"sprintf", 560},
            {"printf", 561},
            {"llvm.floor.f64", 562},
            {"exp", 563},
            {"llvm.fabs.f64", 564},
            {"sqrt", 565},
            {"fopen", 566},
            {"fread", 567},
            {"rewind", 568},
            {"strncmp", 569},
            {"feof", 570},
            {"atoi", 571},
            {"strcmp", 572},
            {"atof", 573},
            {"strcat", 574},
            {"fseek", 575},
            {"fclose", 576},
            {"fwrite", 577},
            {"time", 578},
            {"puts", 579},
            {"exit", 580},
            {"remove", 581},
            {"pow", 582},
            {"ctime", 583},
            {"strncpy", 584},
            {"fflush", 585},
            {"malloc", 586},
            {"getenv", 587},
            {"strspn", 588},
            {"strcspn", 589},
            {"strftime", 590},
            {"fputc", 591},
            {"llvm.va_start", 592},
            {"vfprintf", 593},
            {"llvm.va_end", 594},
            {"perror", 595},
            {"strncat", 596},
            {"realloc", 597},
            {"ftell", 598},
            {"abort", 599},
            {"system", 600},
            {"llvm.dbg.value", 601},
            {"llvm.memset.p0.i64", 602},
            {"llvm.memmove.p0.p0.i64", 603},
            {"llvm.memcpy.p0.p0.i64", 604}
        };

        // Graph Representation: Vector of (caller, callee) pairs
        const std::vector<EdgeT> graph = {
            {0, 360},
            {0, 1},
            {0, 354},
            {0, 353},
            {1, 353},
            {1, 2},
            {1, 548},
            {1, 602},
            {2, 549},
            {2, 542},
            {3, 550},
            {3, 542},
            {4, 3},
            {4, 427},
            {5, 427},
            {6, 3},
            {6, 427},
            {8, 542},
            {10, 353},
            {10, 427},
            {11, 428},
            {12, 10},
            {13, 552},
            {14, 427},
            {15, 552},
            {16, 553},
            {19, 105},
            {19, 12},
            {19, 13},
            {19, 102},
            {20, 353},
            {20, 193},
            {20, 100},
            {20, 188},
            {20, 189},
            {20, 190},
            {21, 552},
            {21, 427},
            {21, 44},
            {21, 16},
            {21, 22},
            {21, 23},
            {21, 188},
            {21, 190},
            {22, 193},
            {22, 102},
            {22, 552},
            {22, 427},
            {22, 12},
            {22, 13},
            {22, 188},
            {22, 189},
            {23, 353},
            {23, 100},
            {23, 552},
            {23, 427},
            {23, 24},
            {23, 188},
            {23, 29},
            {24, 353},
            {24, 102},
            {24, 12},
            {24, 13},
            {24, 29},
            {25, 12},
            {25, 13},
            {25, 102},
            {26, 7},
            {26, 552},
            {26, 554},
            {26, 427},
            {26, 12},
            {26, 13},
            {26, 14},
            {26, 15},
            {26, 500},
            {26, 502},
            {26, 504},
            {26, 27},
            {26, 542},
            {27, 353},
            {27, 193},
            {27, 100},
            {27, 189},
            {27, 188},
            {27, 29},
            {28, 353},
            {28, 195},
            {28, 516},
            {28, 103},
            {28, 552},
            {28, 199},
            {28, 201},
            {28, 427},
            {28, 555},
            {28, 203},
            {28, 114},
            {28, 182},
            {28, 190},
            {31, 353},
            {31, 196},
            {31, 556},
            {31, 557},
            {31, 558},
            {31, 29},
            {32, 353},
            {32, 556},
            {32, 558},
            {35, 36},
            {36, 552},
            {36, 353},
            {36, 37},
            {36, 559},
            {37, 560},
            {37, 353},
            {37, 101},
            {37, 561},
            {38, 561},
            {38, 39},
            {39, 561},
            {40, 353},
            {40, 420},
            {40, 552},
            {40, 427},
            {40, 428},
            {40, 188},
            {40, 508},
            {40, 189},
            {40, 190},
            {40, 191},
            {41, 516},
            {41, 552},
            {41, 42},
            {41, 427},
            {41, 557},
            {41, 188},
            {41, 190},
            {41, 191},
            {42, 554},
            {42, 427},
            {43, 353},
            {43, 354},
            {43, 516},
            {43, 140},
            {43, 556},
            {44, 11},
            {44, 20},
            {44, 102},
            {45, 427},
            {46, 552},
            {47, 552},
            {48, 353},
            {48, 562},
            {48, 603},
            {48, 428},
            {49, 353},
            {49, 556},
            {49, 558},
            {49, 560},
            {49, 602},
            {50, 51},
            {50, 556},
            {51, 555},
            {51, 563},
            {52, 51},
            {52, 556},
            {53, 555},
            {53, 51},
            {53, 556},
            {54, 552},
            {54, 555},
            {54, 427},
            {54, 405},
            {54, 55},
            {55, 56},
            {55, 427},
            {55, 413},
            {55, 47},
            {56, 51},
            {57, 552},
            {57, 427},
            {57, 555},
            {57, 47},
            {57, 55},
            {57, 58},
            {57, 59},
            {57, 60},
            {58, 563},
            {59, 553},
            {59, 555},
            {59, 563},
            {59, 564},
            {59, 62},
            {60, 553},
            {60, 555},
            {60, 563},
            {60, 564},
            {60, 61},
            {61, 553},
            {61, 563},
            {62, 553},
            {62, 563},
            {63, 554},
            {63, 427},
            {63, 47},
            {63, 563},
            {63, 565},
            {63, 413},
            {64, 427},
            {64, 47},
            {64, 563},
            {64, 565},
            {64, 413},
            {65, 553},
            {65, 563},
            {66, 563},
            {66, 51},
            {67, 555},
            {67, 414},
            {68, 248},
            {68, 353},
            {68, 354},
            {68, 69},
            {68, 453},
            {68, 549},
            {68, 552},
            {68, 456},
            {68, 567},
            {68, 427},
            {68, 560},
            {68, 246},
            {68, 566},
            {68, 568},
            {68, 569},
            {68, 438},
            {68, 541},
            {69, 576},
            {69, 552},
            {69, 444},
            {70, 1},
            {70, 130},
            {70, 131},
            {70, 132},
            {70, 353},
            {70, 83},
            {70, 84},
            {70, 567},
            {70, 570},
            {70, 30},
            {71, 567},
            {71, 421},
            {71, 154},
            {71, 138},
            {71, 82},
            {71, 151},
            {71, 570},
            {72, 421},
            {72, 154},
            {72, 138},
            {72, 82},
            {72, 567},
            {72, 151},
            {72, 570},
            {73, 421},
            {73, 138},
            {73, 82},
            {73, 570},
            {73, 567},
            {73, 151},
            {73, 154},
            {74, 421},
            {74, 154},
            {74, 138},
            {74, 82},
            {74, 567},
            {74, 151},
            {74, 570},
            {75, 1},
            {75, 130},
            {75, 131},
            {75, 132},
            {75, 134},
            {75, 135},
            {75, 136},
            {75, 142},
            {75, 404},
            {75, 538},
            {75, 541},
            {75, 30},
            {75, 421},
            {75, 422},
            {75, 549},
            {75, 426},
            {75, 428},
            {75, 569},
            {75, 570},
            {75, 571},
            {75, 573},
            {75, 574},
            {75, 81},
            {75, 353},
            {76, 1},
            {76, 130},
            {76, 131},
            {76, 132},
            {76, 133},
            {76, 134},
            {76, 138},
            {76, 142},
            {76, 146},
            {76, 541},
            {76, 30},
            {76, 421},
            {76, 426},
            {76, 569},
            {76, 570},
            {76, 571},
            {76, 572},
            {76, 81},
            {76, 353},
            {76, 117},
            {77, 421},
            {77, 138},
            {77, 142},
            {77, 80},
            {77, 570},
            {77, 151},
            {77, 154},
            {77, 541},
            {78, 353},
            {79, 353},
            {80, 353},
            {80, 541},
            {80, 573},
            {80, 1},
            {80, 155},
            {80, 30},
            {80, 152},
            {80, 569},
            {80, 538},
            {80, 571},
            {80, 156},
            {80, 540},
            {80, 572},
            {81, 571},
            {81, 101},
            {82, 353},
            {82, 1},
            {82, 428},
            {82, 83},
            {82, 567},
            {82, 152},
            {82, 155},
            {82, 156},
            {82, 30},
            {82, 575},
            {84, 552},
            {84, 83},
            {84, 427},
            {84, 567},
            {85, 456},
            {85, 353},
            {86, 568},
            {87, 448},
            {87, 446},
            {88, 450},
            {88, 446},
            {89, 90},
            {89, 91},
            {89, 556},
            {89, 558},
            {90, 552},
            {90, 538},
            {90, 556},
            {90, 421},
            {91, 560},
            {91, 100},
            {92, 577},
            {92, 93},
            {93, 577},
            {93, 549},
            {94, 132},
            {94, 137},
            {94, 290},
            {94, 548},
            {94, 549},
            {94, 552},
            {94, 427},
            {94, 428},
            {94, 556},
            {94, 46},
            {94, 561},
            {94, 49},
            {94, 566},
            {94, 57},
            {94, 571},
            {94, 572},
            {94, 573},
            {94, 574},
            {94, 576},
            {94, 578},
            {94, 579},
            {94, 580},
            {94, 581},
            {94, 69},
            {94, 68},
            {94, 85},
            {94, 86},
            {94, 89},
            {94, 92},
            {94, 95},
            {94, 353},
            {94, 355},
            {94, 116},
            {94, 249},
            {94, 250},
            {95, 418},
            {95, 4},
            {95, 552},
            {95, 10},
            {95, 140},
            {95, 45},
            {95, 172},
            {95, 431},
            {95, 16},
            {95, 44},
            {95, 48},
            {95, 13},
            {95, 21},
            {95, 415},
            {96, 132},
            {96, 140},
            {96, 399},
            {96, 273},
            {96, 290},
            {96, 45},
            {96, 46},
            {96, 561},
            {96, 177},
            {96, 179},
            {96, 55},
            {96, 183},
            {96, 184},
            {96, 186},
            {96, 571},
            {96, 572},
            {96, 573},
            {96, 579},
            {96, 580},
            {96, 69},
            {96, 68},
            {96, 200},
            {96, 85},
            {96, 94},
            {96, 353},
            {96, 98},
            {96, 97},
            {96, 99},
            {96, 356},
            {96, 365},
            {96, 116},
            {96, 119},
            {96, 250},
            {97, 353},
            {98, 353},
            {99, 4},
            {99, 103},
            {99, 552},
            {99, 10},
            {99, 44},
            {99, 13},
            {99, 366},
            {99, 16},
            {99, 113},
            {99, 114},
            {99, 19},
            {99, 372},
            {99, 21},
            {99, 48},
            {99, 28},
            {99, 190},
            {100, 553},
            {100, 562},
            {100, 555},
            {101, 563},
            {103, 51},
            {103, 555},
            {103, 563},
            {104, 555},
            {104, 563},
            {105, 106},
            {106, 563},
            {106, 555},
            {107, 563},
            {108, 407},
            {109, 520},
            {109, 110},
            {110, 353},
            {110, 582},
            {110, 553},
            {110, 555},
            {110, 563},
            {110, 565},
            {110, 414},
            {111, 420},
            {111, 500},
            {112, 553},
            {112, 555},
            {112, 407},
            {113, 552},
            {113, 555},
            {113, 562},
            {113, 427},
            {114, 100},
            {114, 102},
            {114, 520},
            {114, 105},
            {114, 141},
            {114, 500},
            {114, 506},
            {116, 556},
            {117, 354},
            {117, 549},
            {117, 490},
            {117, 491},
            {117, 538},
            {117, 541},
            {117, 542},
            {118, 540},
            {118, 541},
            {120, 552},
            {120, 353},
            {120, 427},
            {120, 121},
            {121, 353},
            {121, 129},
            {121, 194},
            {121, 132},
            {121, 133},
            {121, 552},
            {121, 427},
            {121, 122},
            {121, 123},
            {121, 190},
            {122, 124},
            {122, 427},
            {122, 188},
            {123, 427},
            {123, 540},
            {123, 301},
            {125, 552},
            {125, 121},
            {125, 427},
            {126, 128},
            {126, 3},
            {126, 7},
            {126, 552},
            {126, 520},
            {126, 554},
            {126, 555},
            {126, 427},
            {126, 175},
            {126, 176},
            {126, 500},
            {126, 504},
            {126, 121},
            {126, 506},
            {126, 508},
            {126, 510},
            {126, 127},
            {127, 554},
            {127, 227},
            {128, 554},
            {128, 500},
            {129, 130},
            {129, 131},
            {130, 427},
            {131, 427},
            {132, 552},
            {133, 500},
            {134, 552},
            {134, 421},
            {134, 422},
            {135, 552},
            {135, 421},
            {135, 422},
            {136, 552},
            {136, 421},
            {136, 422},
            {137, 427},
            {137, 428},
            {137, 549},
            {137, 574},
            {138, 578},
            {138, 421},
            {138, 422},
            {138, 583},
            {138, 552},
            {140, 100},
            {140, 104},
            {140, 553},
            {140, 555},
            {140, 141},
            {140, 562},
            {141, 553},
            {141, 555},
            {142, 504},
            {142, 520},
            {142, 502},
            {143, 504},
            {143, 554},
            {143, 502},
            {144, 500},
            {144, 143},
            {145, 500},
            {145, 143},
            {146, 500},
            {146, 143},
            {147, 500},
            {147, 143},
            {148, 500},
            {148, 143},
            {149, 100},
            {149, 500},
            {150, 195},
            {150, 554},
            {150, 140},
            {150, 556},
            {150, 565},
            {151, 129},
            {151, 548},
            {151, 134},
            {151, 172},
            {151, 142},
            {151, 146},
            {152, 153},
            {152, 427},
            {152, 421},
            {154, 552},
            {155, 520},
            {156, 353},
            {157, 160},
            {157, 13},
            {157, 19},
            {157, 158},
            {157, 159},
            {158, 105},
            {158, 12},
            {158, 13},
            {158, 102},
            {159, 105},
            {160, 105},
            {160, 161},
            {160, 101},
            {161, 353},
            {161, 193},
            {161, 105},
            {161, 188},
            {161, 189},
            {162, 163},
            {162, 427},
            {163, 101},
            {164, 427},
            {165, 552},
            {166, 164},
            {166, 500},
            {167, 168},
            {167, 353},
            {167, 169},
            {168, 164},
            {169, 164},
            {169, 500},
            {170, 576},
            {170, 353},
            {170, 164},
            {170, 426},
            {170, 117},
            {170, 566},
            {170, 571},
            {170, 572},
            {170, 573},
            {171, 576},
            {171, 353},
            {171, 552},
            {171, 520},
            {171, 429},
            {171, 241},
            {171, 563},
            {171, 246},
            {171, 566},
            {171, 248},
            {171, 502},
            {173, 576},
            {173, 353},
            {173, 1},
            {173, 426},
            {173, 117},
            {173, 566},
            {173, 572},
            {173, 573},
            {174, 353},
            {174, 142},
            {174, 175},
            {174, 176},
            {174, 500},
            {174, 508},
            {175, 520},
            {175, 107},
            {175, 555},
            {175, 108},
            {175, 504},
            {176, 520},
            {176, 107},
            {176, 555},
            {176, 108},
            {176, 504},
            {177, 427},
            {178, 428},
            {179, 552},
            {179, 180},
            {180, 552},
            {181, 427},
            {182, 178},
            {182, 421},
            {184, 549},
            {186, 427},
            {186, 206},
            {187, 561},
            {187, 549},
            {188, 427},
            {189, 428},
            {190, 552},
            {192, 552},
            {192, 427},
            {193, 552},
            {193, 427},
            {194, 353},
            {194, 29},
            {194, 7},
            {195, 196},
            {195, 102},
            {196, 353},
            {196, 100},
            {196, 29},
            {197, 225},
            {197, 353},
            {197, 292},
            {197, 198},
            {197, 295},
            {197, 296},
            {197, 552},
            {197, 427},
            {197, 557},
            {197, 560},
            {197, 435},
            {197, 540},
            {197, 29},
            {199, 353},
            {199, 516},
            {199, 421},
            {199, 427},
            {199, 557},
            {199, 181},
            {199, 602},
            {200, 584},
            {200, 585},
            {200, 556},
            {201, 427},
            {201, 188},
            {203, 353},
            {204, 188},
            {204, 191},
            {205, 353},
            {205, 427},
            {205, 188},
            {205, 191},
            {206, 207},
            {207, 207},
            {208, 353},
            {208, 292},
            {208, 293},
            {208, 294},
            {208, 296},
            {208, 303},
            {208, 433},
            {208, 434},
            {208, 435},
            {208, 311},
            {208, 570},
            {208, 254},
            {209, 584},
            {209, 556},
            {210, 552},
            {210, 211},
            {210, 212},
            {211, 427},
            {211, 549},
            {213, 552},
            {213, 212},
            {213, 214},
            {214, 552},
            {214, 427},
            {214, 549},
            {215, 210},
            {216, 213},
            {218, 217},
            {218, 414},
            {219, 427},
            {219, 540},
            {219, 550},
            {220, 427},
            {220, 500},
            {220, 221},
            {222, 552},
            {222, 429},
            {223, 540},
            {224, 557},
            {224, 550},
            {225, 552},
            {225, 427},
            {225, 549},
            {226, 552},
            {226, 427},
            {226, 549},
            {228, 584},
            {228, 538},
            {228, 556},
            {228, 549},
            {230, 549},
            {230, 552},
            {230, 553},
            {230, 427},
            {230, 429},
            {230, 368},
            {230, 414},
            {232, 544},
            {232, 353},
            {232, 545},
            {232, 292},
            {232, 313},
            {232, 303},
            {232, 433},
            {232, 434},
            {232, 311},
            {232, 569},
            {232, 570},
            {233, 584},
            {233, 556},
            {233, 549},
            {234, 353},
            {234, 552},
            {234, 427},
            {234, 235},
            {234, 429},
            {235, 586},
            {235, 559},
            {236, 552},
            {237, 408},
            {237, 217},
            {238, 408},
            {238, 217},
            {239, 552},
            {239, 427},
            {239, 556},
            {239, 558},
            {239, 474},
            {239, 475},
            {239, 476},
            {239, 478},
            {240, 556},
            {241, 544},
            {241, 353},
            {241, 354},
            {241, 573},
            {241, 555},
            {241, 491},
            {241, 559},
            {241, 571},
            {241, 538},
            {241, 539},
            {241, 540},
            {241, 541},
            {241, 542},
            {242, 353},
            {242, 549},
            {242, 552},
            {242, 556},
            {242, 435},
            {243, 539},
            {243, 584},
            {243, 427},
            {244, 427},
            {244, 539},
            {244, 548},
            {244, 549},
            {245, 552},
            {245, 243},
            {245, 244},
            {245, 246},
            {245, 572},
            {246, 560},
            {246, 427},
            {246, 548},
            {246, 549},
            {247, 560},
            {247, 427},
            {247, 549},
            {248, 549},
            {248, 421},
            {248, 552},
            {248, 587},
            {248, 560},
            {248, 566},
            {248, 538},
            {249, 576},
            {249, 566},
            {250, 353},
            {250, 549},
            {250, 490},
            {250, 491},
            {250, 569},
            {250, 572},
            {250, 542},
            {251, 252},
            {252, 353},
            {252, 427},
            {253, 552},
            {254, 256},
            {254, 548},
            {254, 549},
            {254, 427},
            {254, 255},
            {256, 552},
            {256, 252},
            {256, 255},
            {257, 572},
            {257, 255},
            {258, 561},
            {259, 552},
            {259, 427},
            {259, 493},
            {259, 494},
            {259, 566},
            {259, 567},
            {259, 572},
            {260, 575},
            {260, 493},
            {260, 494},
            {260, 567},
            {261, 260},
            {261, 572},
            {261, 575},
            {262, 576},
            {262, 552},
            {263, 427},
            {264, 552},
            {265, 353},
            {265, 435},
            {265, 428},
            {265, 549},
            {266, 584},
            {266, 353},
            {266, 428},
            {266, 549},
            {267, 206},
            {268, 572},
            {269, 272},
            {269, 353},
            {269, 270},
            {269, 271},
            {270, 353},
            {270, 577},
            {270, 355},
            {270, 548},
            {270, 495},
            {270, 496},
            {271, 577},
            {271, 353},
            {271, 355},
            {271, 549},
            {271, 495},
            {271, 496},
            {272, 577},
            {272, 353},
            {272, 355},
            {272, 549},
            {272, 495},
            {272, 496},
            {273, 353},
            {273, 552},
            {273, 584},
            {273, 427},
            {273, 274},
            {273, 275},
            {274, 549},
            {274, 586},
            {274, 276},
            {274, 279},
            {274, 281},
            {274, 282},
            {275, 544},
            {275, 276},
            {275, 277},
            {275, 542},
            {276, 580},
            {276, 556},
            {277, 278},
            {278, 549},
            {278, 276},
            {278, 278},
            {278, 279},
            {278, 280},
            {278, 569},
            {278, 542},
            {280, 589},
            {280, 276},
            {280, 549},
            {280, 588},
            {282, 276},
            {282, 279},
            {282, 283},
            {282, 284},
            {282, 285},
            {282, 286},
            {284, 283},
            {284, 285},
            {284, 287},
            {285, 279},
            {286, 285},
            {287, 288},
            {287, 289},
            {287, 276},
            {287, 283},
            {287, 285},
            {287, 286},
            {288, 589},
            {288, 276},
            {288, 281},
            {288, 282},
            {288, 283},
            {289, 603},
            {290, 552},
            {291, 584},
            {291, 276},
            {291, 540},
            {292, 427},
            {292, 251},
            {293, 428},
            {294, 552},
            {294, 253},
            {294, 430},
            {294, 429},
            {295, 435},
            {295, 427},
            {296, 435},
            {296, 427},
            {297, 427},
            {297, 428},
            {297, 435},
            {298, 435},
            {298, 428},
            {298, 427},
            {299, 353},
            {299, 257},
            {299, 427},
            {299, 428},
            {299, 433},
            {299, 435},
            {299, 251},
            {299, 254},
            {300, 257},
            {300, 427},
            {300, 428},
            {300, 433},
            {300, 435},
            {300, 251},
            {300, 254},
            {301, 257},
            {302, 257},
            {302, 427},
            {302, 428},
            {302, 433},
            {302, 435},
            {302, 251},
            {302, 254},
            {303, 552},
            {303, 353},
            {303, 500},
            {303, 549},
            {304, 353},
            {304, 549},
            {304, 552},
            {304, 427},
            {304, 560},
            {304, 305},
            {304, 435},
            {304, 438},
            {304, 566},
            {304, 248},
            {304, 246},
            {304, 572},
            {305, 400},
            {305, 353},
            {305, 358},
            {306, 568},
            {307, 448},
            {307, 446},
            {308, 450},
            {308, 446},
            {309, 353},
            {309, 324},
            {309, 326},
            {309, 232},
            {309, 331},
            {309, 208},
            {309, 479},
            {310, 552},
            {310, 576},
            {310, 444},
            {311, 432},
            {312, 353},
            {312, 325},
            {312, 486},
            {312, 327},
            {312, 488},
            {312, 233},
            {312, 333},
            {312, 209},
            {313, 257},
            {313, 293},
            {313, 435},
            {313, 572},
            {313, 254},
            {314, 225},
            {314, 548},
            {314, 292},
            {314, 295},
            {314, 296},
            {314, 427},
            {314, 435},
            {314, 254},
            {315, 552},
            {315, 427},
            {315, 316},
            {317, 552},
            {317, 427},
            {317, 316},
            {318, 292},
            {318, 295},
            {318, 296},
            {318, 552},
            {318, 427},
            {318, 435},
            {318, 315},
            {318, 254},
            {323, 227},
            {324, 257},
            {324, 273},
            {324, 540},
            {324, 544},
            {324, 292},
            {324, 293},
            {324, 297},
            {324, 303},
            {324, 433},
            {324, 434},
            {324, 435},
            {324, 437},
            {324, 311},
            {324, 569},
            {324, 570},
            {324, 571},
            {324, 573},
            {324, 353},
            {324, 254},
            {325, 353},
            {325, 578},
            {325, 546},
            {325, 549},
            {325, 584},
            {325, 393},
            {325, 394},
            {325, 395},
            {325, 556},
            {325, 429},
            {325, 427},
            {325, 591},
            {325, 590},
            {325, 435},
            {325, 540},
            {326, 353},
            {326, 292},
            {326, 584},
            {326, 490},
            {326, 303},
            {326, 433},
            {326, 434},
            {326, 435},
            {326, 311},
            {326, 570},
            {326, 571},
            {326, 540},
            {326, 254},
            {327, 584},
            {327, 556},
            {328, 404},
            {328, 403},
            {328, 348},
            {328, 540},
            {329, 340},
            {329, 549},
            {331, 538},
            {331, 541},
            {331, 542},
            {331, 548},
            {331, 549},
            {331, 421},
            {331, 552},
            {331, 427},
            {331, 428},
            {331, 303},
            {331, 568},
            {331, 569},
            {331, 314},
            {331, 570},
            {331, 572},
            {331, 573},
            {331, 332},
            {331, 221},
            {331, 222},
            {331, 353},
            {331, 354},
            {331, 491},
            {331, 367},
            {331, 500},
            {332, 354},
            {333, 334},
            {334, 549},
            {334, 584},
            {334, 552},
            {334, 586},
            {334, 556},
            {335, 334},
            {336, 427},
            {336, 549},
            {337, 576},
            {337, 360},
            {337, 566},
            {337, 569},
            {337, 538},
            {337, 541},
            {337, 542},
            {340, 540},
            {340, 550},
            {341, 549},
            {344, 548},
            {344, 549},
            {344, 414},
            {345, 353},
            {345, 549},
            {345, 550},
            {345, 552},
            {345, 427},
            {345, 429},
            {345, 540},
            {345, 414},
            {346, 420},
            {346, 549},
            {346, 550},
            {346, 520},
            {346, 500},
            {346, 540},
            {347, 420},
            {347, 549},
            {347, 550},
            {347, 520},
            {347, 500},
            {347, 540},
            {348, 549},
            {349, 548},
            {349, 549},
            {349, 414},
            {350, 548},
            {350, 414},
            {351, 414},
            {352, 548},
            {352, 549},
            {352, 552},
            {352, 427},
            {352, 414},
            {353, 580},
            {353, 585},
            {353, 556},
            {353, 592},
            {353, 593},
            {353, 594},
            {354, 585},
            {354, 556},
            {354, 592},
            {354, 593},
            {354, 594},
            {355, 595},
            {355, 556},
            {355, 580},
            {356, 357},
            {357, 353},
            {357, 358},
            {357, 359},
            {357, 427},
            {357, 435},
            {357, 309},
            {357, 566},
            {357, 248},
            {357, 572},
            {358, 544},
            {358, 353},
            {358, 552},
            {358, 360},
            {358, 490},
            {358, 432},
            {358, 434},
            {358, 435},
            {358, 437},
            {358, 568},
            {358, 569},
            {358, 542},
            {359, 432},
            {359, 353},
            {359, 456},
            {360, 404},
            {360, 540},
            {360, 542},
            {361, 357},
            {362, 353},
            {362, 446},
            {362, 359},
            {363, 568},
            {363, 353},
            {363, 359},
            {365, 576},
            {365, 552},
            {365, 294},
            {366, 552},
            {367, 353},
            {367, 549},
            {367, 584},
            {367, 490},
            {367, 596},
            {367, 571},
            {367, 540},
            {368, 548},
            {368, 421},
            {371, 542},
            {372, 544},
            {372, 549},
            {372, 294},
            {372, 552},
            {372, 559},
            {372, 309},
            {372, 570},
            {372, 226},
            {372, 359},
            {372, 367},
            {372, 373},
            {372, 374},
            {372, 375},
            {372, 376},
            {372, 377},
            {372, 378},
            {372, 379},
            {372, 380},
            {372, 381},
            {373, 385},
            {373, 359},
            {373, 367},
            {373, 570},
            {373, 538},
            {374, 385},
            {374, 359},
            {374, 367},
            {374, 570},
            {374, 569},
            {374, 538},
            {375, 544},
            {375, 385},
            {375, 359},
            {375, 367},
            {375, 538},
            {375, 569},
            {375, 570},
            {375, 604},
            {376, 385},
            {376, 353},
            {376, 359},
            {376, 367},
            {376, 570},
            {376, 538},
            {376, 604},
            {377, 544},
            {377, 385},
            {377, 359},
            {377, 367},
            {377, 538},
            {377, 569},
            {377, 570},
            {377, 604},
            {378, 385},
            {378, 359},
            {378, 367},
            {378, 538},
            {378, 570},
            {379, 385},
            {379, 359},
            {379, 367},
            {379, 538},
            {379, 569},
            {379, 570},
            {379, 604},
            {380, 385},
            {380, 353},
            {380, 359},
            {380, 367},
            {380, 273},
            {380, 597},
            {380, 567},
            {380, 570},
            {380, 571},
            {380, 383},
            {381, 544},
            {381, 359},
            {381, 367},
            {381, 538},
            {381, 570},
            {381, 382},
            {382, 428},
            {382, 540},
            {385, 353},
            {385, 359},
            {385, 456},
            {385, 570},
            {385, 604},
            {385, 382},
            {386, 569},
            {388, 569},
            {390, 544},
            {391, 544},
            {392, 542},
            {393, 404},
            {394, 393},
            {394, 549},
            {395, 360},
            {396, 584},
            {396, 556},
            {396, 549},
            {397, 353},
            {397, 548},
            {397, 549},
            {397, 425},
            {397, 393},
            {397, 426},
            {397, 556},
            {397, 591},
            {398, 356},
            {398, 427},
            {398, 428},
            {398, 365},
            {398, 372},
            {399, 552},
            {399, 426},
            {399, 435},
            {399, 572},
            {400, 353},
            {401, 320},
            {401, 226},
            {401, 227},
            {401, 427},
            {401, 367},
            {401, 319},
            {402, 556},
            {403, 540},
            {403, 557},
            {404, 540},
            {404, 550},
            {405, 554},
            {405, 565},
            {406, 553},
            {407, 553},
            {407, 555},
            {408, 427},
            {409, 552},
            {410, 427},
            {411, 552},
            {412, 554},
            {413, 353},
            {413, 553},
            {413, 555},
            {413, 563},
            {413, 564},
            {413, 407},
            {416, 414},
            {417, 555},
            {417, 414},
            {418, 553},
            {418, 414},
            {419, 414},
            {420, 414},
            {421, 586},
            {421, 548},
            {421, 549},
            {422, 540},
            {422, 549},
            {425, 403},
            {426, 404},
            {427, 353},
            {427, 586},
            {428, 353},
            {428, 597},
            {429, 552},
            {430, 552},
            {431, 427},
            {431, 420},
            {432, 549},
            {432, 427},
            {432, 428},
            {432, 570},
            {432, 541},
            {433, 428},
            {433, 427},
            {433, 604},
            {433, 549},
            {434, 588},
            {434, 589},
            {435, 427},
            {435, 548},
            {435, 549},
            {436, 584},
            {437, 540},
            {438, 552},
            {438, 586},
            {438, 566},
            {438, 439},
            {439, 586},
            {439, 567},
            {439, 440},
            {439, 441},
            {439, 442},
            {439, 443},
            {439, 444},
            {440, 494},
            {440, 567},
            {441, 493},
            {441, 567},
            {442, 440},
            {442, 447},
            {443, 446},
            {444, 552},
            {444, 576},
            {444, 445},
            {445, 552},
            {446, 575},
            {447, 497},
            {447, 567},
            {448, 448},
            {448, 449},
            {448, 552},
            {448, 586},
            {448, 567},
            {448, 441},
            {448, 442},
            {449, 552},
            {449, 586},
            {449, 567},
            {449, 443},
            {449, 572},
            {450, 552},
            {450, 586},
            {450, 567},
            {450, 441},
            {450, 442},
            {450, 443},
            {451, 440},
            {451, 442},
            {451, 448},
            {454, 353},
            {454, 586},
            {454, 455},
            {455, 552},
            {455, 576},
            {455, 581},
            {456, 598},
            {456, 599},
            {457, 549},
            {457, 244},
            {457, 597},
            {459, 549},
            {459, 460},
            {459, 556},
            {459, 461},
            {459, 435},
            {459, 597},
            {459, 599},
            {459, 604},
            {461, 552},
            {461, 249},
            {461, 556},
            {461, 566},
            {462, 549},
            {462, 460},
            {462, 461},
            {462, 556},
            {462, 435},
            {462, 597},
            {463, 576},
            {463, 577},
            {463, 471},
            {463, 353},
            {463, 548},
            {463, 552},
            {463, 586},
            {463, 460},
            {463, 206},
            {463, 432},
            {463, 560},
            {463, 466},
            {463, 467},
            {463, 468},
            {463, 469},
            {463, 470},
            {463, 566},
            {463, 600},
            {464, 572},
            {465, 572},
            {466, 496},
            {466, 577},
            {467, 577},
            {467, 495},
            {468, 577},
            {468, 498},
            {469, 434},
            {469, 571},
            {469, 543},
            {470, 466},
            {470, 468},
            {470, 599},
            {471, 434},
            {473, 353},
            {473, 461},
            {474, 353},
            {474, 586},
            {475, 353},
            {475, 586},
            {476, 552},
            {478, 552},
            {478, 476},
            {479, 480},
            {479, 353},
            {479, 482},
            {479, 483},
            {479, 481},
            {479, 485},
            {479, 294},
            {479, 484},
            {479, 292},
            {479, 303},
            {479, 437},
            {479, 311},
            {479, 569},
            {479, 570},
            {480, 298},
            {480, 434},
            {480, 435},
            {480, 572},
            {480, 573},
            {481, 295},
            {481, 296},
            {481, 299},
            {481, 434},
            {481, 313},
            {481, 572},
            {481, 573},
            {482, 433},
            {482, 434},
            {482, 300},
            {482, 572},
            {483, 427},
            {483, 302},
            {483, 433},
            {483, 434},
            {483, 313},
            {483, 572},
            {484, 297},
            {484, 434},
            {485, 313},
            {485, 434},
            {485, 433},
            {486, 487},
            {487, 549},
            {487, 552},
            {487, 584},
            {487, 427},
            {487, 556},
            {487, 434},
            {488, 487},
            {489, 353},
            {489, 548},
            {489, 549},
            {489, 559},
            {490, 569},
            {490, 540},
            {490, 549},
            {491, 540},
            {509, 553},
            {510, 554},
            {519, 503},
            {520, 504},
            {521, 555},
            {522, 555},
            {523, 563},
            {524, 563},
            {525, 563},
            {525, 555},
            {525, 511},
            {526, 512},
            {526, 555},
            {526, 563},
            {527, 353},
            {527, 552},
            {527, 234},
            {527, 427},
            {527, 236},
            {527, 237},
            {527, 528},
            {527, 529},
            {527, 409},
            {528, 528},
            {529, 529},
            {530, 353},
            {530, 552},
            {530, 427},
            {530, 429},
            {530, 531},
            {530, 500},
            {530, 532},
            {530, 602},
            {530, 540},
            {530, 414},
            {531, 353},
            {531, 586},
            {531, 532},
            {533, 552},
            {533, 427},
            {533, 500},
            {533, 534},
            {534, 552},
            {534, 427},
            {534, 532},
            {535, 227},
            {535, 550},
            {535, 500},
            {535, 502},
            {535, 504},
            {535, 540},
            {536, 552},
            {536, 427},
            {536, 561},
            {536, 217},
            {536, 318},
            {537, 414},
            {537, 552},
            {537, 427},
            {537, 561},
            {537, 318},
            {540, 586},
            {546, 586}
        };

        const unsigned int graph_size = 1774;
    
    public:
        inline const std::vector<EdgeT>& getGraph() const {
            return graph;
        }

        inline const std::map<FuncDataT, NodeIdT>& getNodeMap() const {
            return node_map;
        }

        inline unsigned int getGraphSize() const {
            return graph_size;
        }
    };


    class PointerGraph : public BaseGraphAPI<PtrDataT, PointerGraph> {
    private:
        // Mapping from NodeData to ID
        const std::map<PtrDataT, NodeIdT> node_map = {
            
        };
        
        // Graph Representation: Vector of (pointer, pointee) pairs
        const std::vector<EdgeT> graph = {
            
        };

        const unsigned int graph_size = 0;
    
    public:
        inline const std::vector<EdgeT>& getGraph() const {
            return graph;
        }

        inline const std::map<PtrDataT, NodeIdT>& getNodeMap() const {
            return node_map;
        }

        inline unsigned int getGraphSize() const {
            return graph_size;
        }
    };
} // namespace PointerGraph

#endif // PTA_GRAPHS_HPP
