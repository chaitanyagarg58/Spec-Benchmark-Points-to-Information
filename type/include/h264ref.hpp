#ifndef PTA_GRAPHS_HPP
#define PTA_GRAPHS_HPP

#include "lhf/lhf.hpp"
#include <map>
#include <vector>
#include <string>

namespace PTA{

    using FuncDataT = std::string;

    struct PtrDataT {
        std::string var;
        std::string scope;
        std::string line;

        bool operator<(const PtrDataT& rhs) const {
            return std::tie(var, scope, line) < std::tie(rhs.var, rhs.scope, rhs.line);
        }
    };
    using NodeIdT = unsigned int;
    using EdgeT = std::pair<NodeIdT, NodeIdT>;

    enum IndexType {
        NODE_FOREST = 1,
        EDGE_FOREST = 2,
    };


    template<typename NodeDataT, typename DerivedGraphT>
    class BaseGraphAPI {
    protected:
        using NodePropertyT = unsigned int;
        using EdgePropertyT = long long;

        using NodeHashForest = lhf::LatticeHashForest<NodePropertyT>;
        using EdgeHashForest = lhf::LatticeHashForest<EdgePropertyT>;
    
        EdgeHashForest edgeForest;
        NodeHashForest nodeForest;
    
        inline const std::vector<EdgeT>& getGraph() const {
            return static_cast<const DerivedGraphT*>(this)->getGraph();
        }

        inline const std::map<NodeDataT, NodeIdT>& getNodeMap() const {
            return static_cast<const DerivedGraphT*>(this)->getNodeMap();
        }
    
        EdgePropertyT getEdgeProperty(const EdgeT& edge) const {
            const std::vector<EdgeT>& graph = getGraph();
            if (std::find(graph.begin(), graph.end(), edge) == graph.end()) {
                throw std::out_of_range("Invalid Edge");
            }
            EdgePropertyT property = (static_cast<EdgePropertyT>(edge.first) << 32) | static_cast<EdgePropertyT>(edge.second);
            return property;
        }
    
        EdgeT getEdge(const EdgePropertyT& edge_property) const {
            NodeIdT src = static_cast<NodeIdT>(edge_property >> 32);
            NodeIdT dst = static_cast<NodeIdT>(edge_property & 0xFFFFFFFF);
            return {src, dst};
        }
    
    public:
        inline NodeIdT getNodeId(const NodeDataT& node) const {
            auto it = getNodeMap().find(node);
            return (it != getNodeMap().end()) ? it->second : -1;
        }

        inline const NodeDataT& getNodeDetails(NodeIdT node_id) const {
            for (const auto& [node, nodeId] : getNodeMap()) {
                if (nodeId == node_id) {
                    return node;
                }
            }
            throw std::out_of_range("NodeID not found in node_map");
        }

        inline lhf::Index getEmptySetIndex() const {
            return lhf::EMPTY_SET;
        }
    
        inline bool is_empty(lhf::Index i) {
            return edgeForest.is_empty(i);
        }
    
        inline bool is_subset(IndexType indexType, lhf::Index a, lhf::Index b) {
            if (indexType == EDGE_FOREST) {
                return edgeForest.is_subset(a, b) == EdgeHashForest::SubsetRelation::SUBSET;
            } else if (indexType == NODE_FOREST) {
                return nodeForest.is_subset(a, b) == NodeHashForest::SubsetRelation::SUBSET;
            }
            throw std::invalid_argument("Invalid index type");
        }

        inline bool is_superset(IndexType indexType, lhf::Index a, lhf::Index b) {
            if (indexType == EDGE_FOREST) {
                return edgeForest.is_subset(a, b) == EdgeHashForest::SubsetRelation::SUPERSET;
            } else if (indexType == NODE_FOREST) {
                return nodeForest.is_subset(a, b) == NodeHashForest::SubsetRelation::SUPERSET;
            }
            throw std::invalid_argument("Invalid index type");
        }
    
        inline lhf::Index getEdgeIndex(const EdgeT& edge) {
            return edgeForest.register_set_single(getEdgeProperty(edge));
        }
    
        inline lhf::Index getEdgeIndex(const EdgeT& edge, bool &cold) {
            return edgeForest.register_set_single(getEdgeProperty(edge), cold);
        }
    
        inline const EdgeHashForest::PropertySet &get_value_edge(lhf::Index idx) const {
            return edgeForest.get_value(idx);
        }

        inline const NodeHashForest::PropertySet &get_value_node(lhf::Index idx) const {
            return nodeForest.get_value(idx);
        }
    
        inline std::size_t size_of(IndexType indexType, lhf::Index idx) const {
            if (indexType == EDGE_FOREST) {
                return edgeForest.size_of(idx);
            } else if (indexType == NODE_FOREST) {
                return nodeForest.size_of(idx);
            }
            throw std::invalid_argument("Invalid index type");
        }
    
        inline bool contains(lhf::Index idx, const EdgeT& edge) const {
            return edgeForest.contains(idx, getEdgeProperty(edge));
        }

        inline bool contains(lhf::Index idx, const NodeIdT& node) const {
            return nodeForest.contains(idx, node);
        }
    
        inline lhf::Index set_union(IndexType indexType, lhf::Index a, lhf::Index b) {
            if (indexType == EDGE_FOREST) {
                return edgeForest.set_union(a, b);
            } else if (indexType == NODE_FOREST) {
                return nodeForest.set_union(a, b);
            }
            throw std::invalid_argument("Invalid index type");
        }
    
        inline lhf::Index set_insert_single(lhf::Index a, const EdgeT& edge) {
            return edgeForest.set_insert_single(a, getEdgeProperty(edge));
        }

        inline lhf::Index set_insert_single(lhf::Index a, const NodeIdT& node) {
            return nodeForest.set_insert_single(a, node);
        }
    
        inline lhf::Index set_remove_single(lhf::Index a, const EdgeT& edge) {
            return edgeForest.set_remove_single(a, getEdgeProperty(edge));
        }

        inline lhf::Index set_remove_single(lhf::Index a, const NodeIdT& node) {
            return nodeForest.set_remove_single(a, node);
        }
    
        inline lhf::Index set_difference(IndexType indexType, lhf::Index a, lhf::Index b) {
            if (indexType == EDGE_FOREST) {
                return edgeForest.set_difference(a, b);
            } else if (indexType == NODE_FOREST) {
                return nodeForest.set_difference(a, b);
            }
            throw std::invalid_argument("Invalid index type");
        }
    
        inline lhf::Index set_intersection(IndexType indexType, lhf::Index a, lhf::Index b) {
            if (indexType == EDGE_FOREST) {
                return edgeForest.set_intersection(a, b);
            } else if (indexType == NODE_FOREST) {
                return nodeForest.set_intersection(a, b);
            }
            throw std::invalid_argument("Invalid index type");
        }
    
        inline const NodeHashForest::PropertySet& get_value_points_to(lhf::Index idx) const {
            return nodeForest.get_value(idx);
        }
    
        lhf::Index get_points_to_set(lhf::Index a, NodeIdT node_id) {
            EdgeHashForest::PropertySet property_set = edgeForest.get_value(a);
            std::vector<NodeIdT> result;
            for (EdgePropertyT property : property_set) {
                EdgeT edge = getEdge(property);
                if (edge.first == node_id) {
                    result.push_back(edge.second);
                }
            }
            return nodeForest.register_set(result);
        }
    
        lhf::Index get_points_to_set(lhf::Index a, const std::vector<NodeIdT>& node_ids) {
            lhf::Index result = getEmptySetIndex();
            for (NodeIdT node_id : node_ids) {
                lhf::Index index = get_points_to_set(a, node_id);
                result = nodeForest.set_union(result, index);
            }
            return result;
        }
    
        lhf::Index get_points_to_set(lhf::Index a, lhf::Index idx) {
            return get_points_to_set(a, get_value_points_to(idx));
        }
    
        lhf::Index get_points_to_set(lhf::Index a, NodeIdT node_id, unsigned int recursion_depth) {
            if (recursion_depth == 0) return {};
            lhf::Index result = get_points_to_set(a, node_id);
            for (int i = 1; i < recursion_depth; i++) {
                result = get_points_to_set(a, result);
                if (nodeForest.is_empty(result)) break;
            }
            return result;
        }
    
        lhf::Index get_points_to_set(lhf::Index a, const std::vector<NodeIdT>& node_ids, unsigned int recursion_depth) {
            if (recursion_depth == 0) return {};
            lhf::Index result = get_points_to_set(a, node_ids);
            for (int i = 1; i < recursion_depth; i++) {
                result = get_points_to_set(a, result);
                if (nodeForest.is_empty(result)) break;
            }
            return result;
        }
    
        void print_points_to_set(lhf::Index idx) const {
            const auto& set = nodeForest.get_value(idx);
            std::cout << "Points-to set (Index = " << idx << "): (";
            for (const auto& v : set) std::cout << v << ", ";
            std::cout << ")" << std::endl;
        }
    };


    class CallGraph : public BaseGraphAPI<FuncDataT, CallGraph> {
    private:
        // Mapping from NodeData to ID
        const std::map<FuncDataT, NodeIdT> node_map = {
            {"WriteAnnexbNALU", 0},
            {"OpenAnnexbFile", 1},
            {"CloseAnnexbFile", 2},
            {"arienco_create_encoding_environment", 3},
            {"arienco_delete_encoding_environment", 4},
            {"arienco_start_encoding", 5},
            {"arienco_bits_written", 6},
            {"arienco_done_encoding", 7},
            {"biari_encode_symbol", 8},
            {"biari_encode_symbol_eq_prob", 9},
            {"biari_encode_symbol_final", 10},
            {"biari_init_context", 11},
            {"intrapred_luma", 12},
            {"intrapred_luma_16x16", 13},
            {"dct_luma_16x16", 14},
            {"dct_luma", 15},
            {"dct_chroma", 16},
            {"dct_chroma4x4", 17},
            {"dct_chroma_DC", 18},
            {"dct_luma_sp", 19},
            {"dct_chroma_sp", 20},
            {"copyblock_sp", 21},
            {"cabac_new_slice", 22},
            {"CheckAvailabilityOfNeighborsCABAC", 23},
            {"create_contexts_MotionInfo", 24},
            {"create_contexts_TextureInfo", 25},
            {"delete_contexts_MotionInfo", 26},
            {"delete_contexts_TextureInfo", 27},
            {"writeSyntaxElement_CABAC", 28},
            {"writeFieldModeInfo_CABAC", 29},
            {"writeMB_skip_flagInfo_CABAC", 30},
            {"writeMB_transform_size_CABAC", 31},
            {"writeMB_typeInfo_CABAC", 32},
            {"writeB8_typeInfo_CABAC", 33},
            {"writeIntraPredMode_CABAC", 34},
            {"writeRefFrame_CABAC", 35},
            {"unary_bin_encode", 36},
            {"writeDquant_CABAC", 37},
            {"writeMVD_CABAC", 38},
            {"unary_exp_golomb_mv_encode", 39},
            {"exp_golomb_encode_eq_prob", 40},
            {"writeCIPredMode_CABAC", 41},
            {"unary_bin_max_encode", 42},
            {"writeCBP_BIT_CABAC", 43},
            {"writeCBP_CABAC", 44},
            {"write_and_store_CBP_block_bit", 45},
            {"write_significance_map", 46},
            {"write_significant_coefficients", 47},
            {"unary_exp_golomb_level_encode", 48},
            {"writeRunLevel_CABAC", 49},
            {"JMHelpExit", 50},
            {"Configure", 51},
            {"InitEncoderParams", 52},
            {"GetConfigFileContent", 53},
            {"ParseContent", 54},
            {"PatchInp", 55},
            {"DisplayEncoderParams", 56},
            {"TestEncoderParams", 57},
            {"CeilLog2", 58},
            {"ProfileCheck", 59},
            {"LevelCheck", 60},
            {"ParameterNameToMapIndex", 61},
            {"PatchInputNoFrames", 62},
            {"create_context_memory", 63},
            {"free_context_memory", 64},
            {"SetCtxModelNumber", 65},
            {"init_contexts", 66},
            {"XRate", 67},
            {"GetCtxModelNumber", 68},
            {"store_contexts", 69},
            {"update_field_frame_contexts", 70},
            {"decode_one_b8block", 71},
            {"Get_Reference_Block", 72},
            {"Get_Reference_Pixel", 73},
            {"decode_one_mb", 74},
            {"UpdateDecoders", 75},
            {"Build_Status_Map", 76},
            {"Error_Concealment", 77},
            {"DecOneForthPix", 78},
            {"Conceal_Error", 79},
            {"compute_residue_b8block", 80},
            {"compute_residue_mb", 81},
            {"create_pyramid", 82},
            {"gop_pyramid", 83},
            {"init_gop_structure", 84},
            {"clear_gop_structure", 85},
            {"interpret_gop_structure", 86},
            {"encode_enhancement_layer", 87},
            {"poc_based_ref_management", 88},
            {"DefineThreshold", 89},
            {"DefineThresholdMB", 90},
            {"get_mem_mincost", 91},
            {"get_mem_bwmincost", 92},
            {"get_mem_FME", 93},
            {"free_mem_mincost", 94},
            {"free_mem_bwmincost", 95},
            {"free_mem_FME", 96},
            {"PartCalMad", 97},
            {"FastIntegerPelBlockMotionSearch", 98},
            {"AddUpSADQuarter", 99},
            {"FastSubPelBlockMotionSearch", 100},
            {"decide_intrabk_SAD", 101},
            {"skip_intrabk_SAD", 102},
            {"error", 103},
            {"write_PPS", 104},
            {"start_sequence", 105},
            {"terminate_sequence", 106},
            {"FmoInit", 107},
            {"FmoGenerateMapUnitToSliceGroupMap", 108},
            {"FmoGenerateMBAmap", 109},
            {"FmoGenerateType0MapUnitMap", 110},
            {"FmoGenerateType1MapUnitMap", 111},
            {"FmoGenerateType2MapUnitMap", 112},
            {"FmoGenerateType3MapUnitMap", 113},
            {"FmoGenerateType4MapUnitMap", 114},
            {"FmoGenerateType5MapUnitMap", 115},
            {"FmoGenerateType6MapUnitMap", 116},
            {"FmoUninit", 117},
            {"FmoStartPicture", 118},
            {"FmoGetFirstMBOfSliceGroup", 119},
            {"FmoMB2SliceGroup", 120},
            {"FmoEndPicture", 121},
            {"FmoGetNextMBNr", 122},
            {"FmoGetPreviousMBNr", 123},
            {"FmoGetLastCodedMBOfSliceGroup", 124},
            {"FmoSetLastMacroblockInSlice", 125},
            {"FmoGetFirstMacroblockInSlice", 126},
            {"FmoSliceGroupCompletelyCoded", 127},
            {"SliceHeader", 128},
            {"get_picture_type", 129},
            {"ref_pic_list_reordering", 130},
            {"pred_weight_table", 131},
            {"dec_ref_pic_marking", 132},
            {"Partition_BC_Header", 133},
            {"MbAffPostProc", 134},
            {"code_a_picture", 135},
            {"encode_one_frame", 136},
            {"put_buffer_frame", 137},
            {"init_frame", 138},
            {"CalculateFrameNumber", 139},
            {"ReadOneFrame", 140},
            {"PaddAutoCropBorders", 141},
            {"field_picture", 142},
            {"frame_picture", 143},
            {"rdPictureCoding", 144},
            {"picture_structure_decision", 145},
            {"field_mode_buffer", 146},
            {"writeout_picture", 147},
            {"frame_mode_buffer", 148},
            {"find_snr", 149},
            {"ReportNALNonVLCBits", 150},
            {"ReportFirstframe", 151},
            {"ReportIntra", 152},
            {"ReportSP", 153},
            {"ReportRB", 154},
            {"ReportB", 155},
            {"ReportP", 156},
            {"put_buffer_top", 157},
            {"put_buffer_bot", 158},
            {"writeUnit", 159},
            {"copy_params", 160},
            {"find_distortion", 161},
            {"init_field", 162},
            {"distortion_fld", 163},
            {"buf2img", 164},
            {"init_dec_ref_pic_marking_buffer", 165},
            {"UnifiedOneForthPix", 166},
            {"GenerateFullPelRepresentation", 167},
            {"dummy_slice_too_big", 168},
            {"copy_rdopt_data", 169},
            {"copy_motion_vectors_MB", 170},
            {"RandomIntraInit", 171},
            {"RandomIntra", 172},
            {"RandomIntraNewPicture", 173},
            {"RandomIntraUninit", 174},
            {"get_LeakyBucketRate", 175},
            {"PutBigDoubleWord", 176},
            {"write_buffer", 177},
            {"Sort", 178},
            {"calc_buffer", 179},
            {"main", 180},
            {"init_poc", 181},
            {"init_img", 182},
            {"malloc_picture", 183},
            {"init_global_buffers", 184},
            {"information_init", 185},
            {"SetImgType", 186},
            {"report_frame_statistic", 187},
            {"process_2nd_IGOP", 188},
            {"report", 189},
            {"free_picture", 190},
            {"free_global_buffers", 191},
            {"free_img", 192},
            {"free_mem_mv", 193},
            {"free_mem_ACcoeff", 194},
            {"free_mem_DCcoeff", 195},
            {"free_orig_planes", 196},
            {"init_orig_buffers", 197},
            {"get_mem_mv", 198},
            {"get_mem_ACcoeff", 199},
            {"get_mem_DCcoeff", 200},
            {"CAVLC_init", 201},
            {"report_stats_on_error", 202},
            {"combine_field", 203},
            {"decide_fld_frame", 204},
            {"DeblockFrame", 205},
            {"DeblockMb", 206},
            {"GetStrength", 207},
            {"EdgeLoop", 208},
            {"set_MB_parameters", 209},
            {"clip1a", 210},
            {"clip1a_chr", 211},
            {"proceed2nextMacroblock", 212},
            {"start_macroblock", 213},
            {"terminate_macroblock", 214},
            {"slice_too_big", 215},
            {"OneComponentLumaPrediction4x4", 216},
            {"copyblock4x4", 217},
            {"LumaPrediction4x4", 218},
            {"LumaPrediction4x4Bi", 219},
            {"LumaResidualCoding8x8", 220},
            {"ChromaPrediction4x4", 221},
            {"IntraChromaPrediction4x4", 222},
            {"OneComponentChromaPrediction4x4", 223},
            {"SetModesAndRefframe", 224},
            {"LumaResidualCoding", 225},
            {"TransformDecision", 226},
            {"ChromaResidualCoding", 227},
            {"IntraChromaPrediction", 228},
            {"ZeroRef", 229},
            {"MBType2Value", 230},
            {"writeIntra4x4Modes", 231},
            {"B8Mode2Value", 232},
            {"writeMBLayer", 233},
            {"writeMotionInfo2NAL", 234},
            {"writeChromaIntraPredMode", 235},
            {"writeCBPandLumaCoeff", 236},
            {"writeChromaCoeff", 237},
            {"writeCoeff4x4_CAVLC", 238},
            {"predict_nnz", 239},
            {"predict_nnz_chroma", 240},
            {"writeLumaCoeff8x8", 241},
            {"writeLumaCoeff4x4_CABAC", 242},
            {"writeLumaCoeff8x8_CABAC", 243},
            {"writeReferenceFrame", 244},
            {"writeMotionVector8x8", 245},
            {"BType2CtxRef", 246},
            {"write_terminating_bit", 247},
            {"set_last_dquant", 248},
            {"write_one_macroblock", 249},
            {"find_sad_16x16", 250},
            {"mb_is_available", 251},
            {"CheckAvailabilityOfNeighbors", 252},
            {"get_mb_block_pos", 253},
            {"get_mb_pos", 254},
            {"getNonAffNeighbour", 255},
            {"getAffNeighbour", 256},
            {"getNeighbour", 257},
            {"getLuma4x4Neighbour", 258},
            {"getChroma4x4Neighbour", 259},
            {"dump_dpb", 260},
            {"getDpbSize", 261},
            {"init_dpb", 262},
            {"free_dpb", 263},
            {"alloc_frame_store", 264},
            {"free_frame_store", 265},
            {"free_storable_picture", 266},
            {"alloc_storable_picture", 267},
            {"is_short_ref", 268},
            {"is_long_ref", 269},
            {"init_lists", 270},
            {"compare_pic_by_pic_num_desc", 271},
            {"compare_pic_by_lt_pic_num_asc", 272},
            {"compare_fs_by_frame_num_desc", 273},
            {"gen_pic_list_from_frame_list", 274},
            {"compare_fs_by_lt_pic_idx_asc", 275},
            {"compare_pic_by_poc_desc", 276},
            {"compare_pic_by_poc_asc", 277},
            {"compare_fs_by_poc_desc", 278},
            {"compare_fs_by_poc_asc", 279},
            {"init_mbaff_lists", 280},
            {"reorder_ref_pic_list", 281},
            {"reorder_short_term", 282},
            {"reorder_long_term", 283},
            {"get_long_term_pic", 284},
            {"get_short_term_pic", 285},
            {"update_ref_list", 286},
            {"is_short_term_reference", 287},
            {"update_ltref_list", 288},
            {"is_long_term_reference", 289},
            {"mm_update_max_long_term_frame_idx", 290},
            {"unmark_for_long_term_reference", 291},
            {"store_picture_in_dpb", 292},
            {"idr_memory_management", 293},
            {"adaptive_memory_management", 294},
            {"insert_picture_in_dpb", 295},
            {"sliding_window_memory_management", 296},
            {"remove_unused_frame_from_dpb", 297},
            {"get_smallest_poc", 298},
            {"output_one_frame_from_dpb", 299},
            {"is_used_for_reference", 300},
            {"remove_frame_from_dpb", 301},
            {"unmark_for_reference", 302},
            {"dpb_split_field", 303},
            {"dpb_combine_field", 304},
            {"gen_field_ref_ids", 305},
            {"mm_unmark_short_term_for_reference", 306},
            {"mm_unmark_long_term_for_reference", 307},
            {"mm_assign_long_term_frame_idx", 308},
            {"mm_unmark_all_short_term_for_reference", 309},
            {"mm_unmark_all_long_term_for_reference", 310},
            {"mm_mark_current_picture_long_term", 311},
            {"flush_dpb", 312},
            {"unmark_long_term_frame_for_reference_by_frame_idx", 313},
            {"unmark_long_term_field_for_reference_by_frame_idx", 314},
            {"get_pic_num_x", 315},
            {"mark_pic_long_term", 316},
            {"replace_top_pic_with_frame", 317},
            {"alloc_ref_pic_list_reordering_buffer", 318},
            {"free_ref_pic_list_reordering_buffer", 319},
            {"fill_frame_num_gap", 320},
            {"alloc_colocated", 321},
            {"free_colocated", 322},
            {"compute_colocated", 323},
            {"init_top_bot_planes", 324},
            {"no_mem_exit", 325},
            {"free_top_bot_planes", 326},
            {"get_mem2Dpel", 327},
            {"get_mem3Dpel", 328},
            {"free_mem2Dpel", 329},
            {"free_mem3Dpel", 330},
            {"get_mem2D", 331},
            {"get_mem2Dint", 332},
            {"get_mem2Dint64", 333},
            {"get_mem3D", 334},
            {"get_mem3Dint", 335},
            {"get_mem3Dint64", 336},
            {"get_mem4Dint", 337},
            {"free_mem2D", 338},
            {"free_mem2Dint", 339},
            {"free_mem2Dint64", 340},
            {"free_mem3D", 341},
            {"free_mem3Dint", 342},
            {"free_mem3Dint64", 343},
            {"free_mem4Dint", 344},
            {"get_mem2Dshort", 345},
            {"get_mem3Dshort", 346},
            {"get_mem4Dshort", 347},
            {"free_mem2Dshort", 348},
            {"free_mem3Dshort", 349},
            {"free_mem4Dshort", 350},
            {"InitializeFastFullIntegerSearch", 351},
            {"ClearFastFullIntegerSearch", 352},
            {"ResetFastFullIntegerSearch", 353},
            {"SetupLargerBlocks", 354},
            {"SetupFastFullPelSearch", 355},
            {"SetMotionVectorPredictor", 356},
            {"Init_Motion_Search_Module", 357},
            {"Clear_Motion_Search_Module", 358},
            {"FullPelBlockMotionSearch", 359},
            {"FastFullPelBlockMotionSearch", 360},
            {"SATD", 361},
            {"SATD8X8", 362},
            {"find_SATD", 363},
            {"SubPelBlockMotionSearch", 364},
            {"FullPelBlockMotionBiPred", 365},
            {"SubPelBlockSearchBiPred", 366},
            {"BPredPartitionCost", 367},
            {"BlockMotionSearch", 368},
            {"FindSkipModeMotionVector", 369},
            {"GetSkipCostMB", 370},
            {"BIDPartitionCost", 371},
            {"Get_Direct_Cost8x8", 372},
            {"Get_Direct_CostMB", 373},
            {"PartitionMotionSearch", 374},
            {"Get_Direct_Motion_Vectors", 375},
            {"sign", 376},
            {"SODBtoRBSP", 377},
            {"RBSPtoEBSP", 378},
            {"AllocNalPayloadBuffer", 379},
            {"FreeNalPayloadBuffer", 380},
            {"RBSPtoNALU", 381},
            {"AllocNALU", 382},
            {"FreeNALU", 383},
            {"testEndian", 384},
            {"img2buf", 385},
            {"write_picture", 386},
            {"write_out_picture", 387},
            {"init_out_buffer", 388},
            {"uninit_out_buffer", 389},
            {"clear_picture", 390},
            {"write_unpaired_field", 391},
            {"flush_direct_output", 392},
            {"write_stored_frame", 393},
            {"direct_output", 394},
            {"GenerateParameterSets", 395},
            {"GenerateSequenceParameterSet", 396},
            {"GeneratePictureParameterSet", 397},
            {"IdentifyProfile", 398},
            {"IdentifyLevel", 399},
            {"FreeParameterSets", 400},
            {"GenerateSeq_parameter_set_NALU", 401},
            {"GenerateSeq_parameter_set_rbsp", 402},
            {"Scaling_List", 403},
            {"GenerateVUISequenceParameters", 404},
            {"GeneratePic_parameter_set_NALU", 405},
            {"GeneratePic_parameter_set_rbsp", 406},
            {"AllocPPS", 407},
            {"AllocSPS", 408},
            {"FreePPS", 409},
            {"FreeSPS", 410},
            {"CheckParameterName", 411},
            {"ParseMatrix", 412},
            {"PatchMatrix", 413},
            {"Init_QMatrix", 414},
            {"CalculateQuantParam", 415},
            {"CalculateQuant8Param", 416},
            {"CheckOffsetParameterName", 417},
            {"ParseQOffsetMatrix", 418},
            {"Init_QOffsetMatrix", 419},
            {"CalculateOffsetParam", 420},
            {"CalculateOffset8Param", 421},
            {"rc_alloc", 422},
            {"rc_free", 423},
            {"rc_init_seq", 424},
            {"rc_init_GOP", 425},
            {"rc_init_pict", 426},
            {"calc_MAD", 427},
            {"rc_update_pict", 428},
            {"rc_update_pict_frame", 429},
            {"setbitscount", 430},
            {"updateQuantizationParameter", 431},
            {"Qstep2QP", 432},
            {"QP2Qstep", 433},
            {"updateRCModel", 434},
            {"ComputeFrameMAD", 435},
            {"RCModelEstimator", 436},
            {"updateMADModel", 437},
            {"MADModelEstimator", 438},
            {"clear_rdopt", 439},
            {"init_rdopt", 440},
            {"UpdatePixelMap", 441},
            {"CheckReliabilityOfRef", 442},
            {"RDCost_for_4x4IntraBlocks", 443},
            {"RDCost_for_4x4Blocks_Chroma", 444},
            {"Mode_Decision_for_4x4IntraBlocks", 445},
            {"Mode_Decision_for_8x8IntraBlocks", 446},
            {"Mode_Decision_for_Intra4x4Macroblock", 447},
            {"RDCost_for_8x8blocks", 448},
            {"I16Offset", 449},
            {"SetModesAndRefframeForBlocks", 450},
            {"Intra16x16_Mode_Decision", 451},
            {"SetCoeffAndReconstruction8x8", 452},
            {"StoreMV8x8", 453},
            {"RestoreMV8x8", 454},
            {"RestoreMVBlock8x8", 455},
            {"StoreMVBlock8x8", 456},
            {"SetMotionVectorsMB", 457},
            {"RDCost_for_macroblocks", 458},
            {"field_flag_inference", 459},
            {"store_macroblock_parameters", 460},
            {"set_stored_macroblock_parameters", 461},
            {"SetRefAndMotionVectors", 462},
            {"StoreNewMotionVectorsBlock8x8", 463},
            {"GetBestTransformP8x8", 464},
            {"encode_one_macroblock", 465},
            {"set_mbaff_parameters", 466},
            {"store_coding_state_cs_cm", 467},
            {"reset_coding_state_cs_cm", 468},
            {"delete_coding_state", 469},
            {"create_coding_state", 470},
            {"store_coding_state", 471},
            {"reset_coding_state", 472},
            {"rd_pic_decision", 473},
            {"picture_coding_decision", 474},
            {"PutPel_14", 475},
            {"PutPel_11", 476},
            {"FastLine16Y_11", 477},
            {"UMVLine16Y_11", 478},
            {"FastLineX", 479},
            {"UMVLineX", 480},
            {"UMVPelY_14", 481},
            {"FastPelY_14", 482},
            {"ComposeRTPPacket", 483},
            {"WriteRTPPacket", 484},
            {"WriteRTPNALU", 485},
            {"RTPUpdateTimestamp", 486},
            {"OpenRTPFile", 487},
            {"CloseRTPFile", 488},
            {"InitSEIMessages", 489},
            {"clear_sei_message", 490},
            {"InitSparePicture", 491},
            {"InitSubseqChar", 492},
            {"InitSubseqLayerInfo", 493},
            {"InitSceneInformation", 494},
            {"InitPanScanRectInfo", 495},
            {"InitUser_data_unregistered", 496},
            {"InitUser_data_registered_itu_t_t35", 497},
            {"InitRandomAccess", 498},
            {"ClearRandomAccess", 499},
            {"ClearUser_data_registered_itu_t_t35", 500},
            {"ClearUser_data_unregistered", 501},
            {"ClearPanScanRectInfoPayload", 502},
            {"ClearSubseqCharPayload", 503},
            {"CloseSparePicture", 504},
            {"CloseSEIMessages", 505},
            {"CloseSubseqLayerInfo", 506},
            {"CloseSubseqChar", 507},
            {"CloseSceneInformation", 508},
            {"ClosePanScanRectInfo", 509},
            {"CloseUser_data_unregistered", 510},
            {"CloseUser_data_registered_itu_t_t35", 511},
            {"CloseRandomAccess", 512},
            {"HaveAggregationSEI", 513},
            {"write_sei_message", 514},
            {"finalize_sei_message", 515},
            {"AppendTmpbits2Buf", 516},
            {"CalculateSparePicture", 517},
            {"ComposeSparePictureMessage", 518},
            {"CompressSpareMBMap", 519},
            {"FinalizeSpareMBMap", 520},
            {"InitSubseqInfo", 521},
            {"UpdateSubseqInfo", 522},
            {"FinalizeSubseqInfo", 523},
            {"ClearSubseqInfoPayload", 524},
            {"CloseSubseqInfo", 525},
            {"FinalizeSubseqLayerInfo", 526},
            {"UpdateSubseqChar", 527},
            {"FinalizeSubseqChar", 528},
            {"FinalizeSceneInformation", 529},
            {"UpdateSceneInformation", 530},
            {"UpdatePanScanRectInfo", 531},
            {"FinalizePanScanRectInfo", 532},
            {"UpdateUser_data_unregistered", 533},
            {"FinalizeUser_data_unregistered", 534},
            {"UpdateUser_data_registered_itu_t_t35", 535},
            {"FinalizeUser_data_registered_itu_t_t35", 536},
            {"UpdateRandomAccess", 537},
            {"FinalizeRandomAccess", 538},
            {"init_ref_pic_list_reordering", 539},
            {"start_slice", 540},
            {"terminate_slice", 541},
            {"encode_one_slice", 542},
            {"init_slice", 543},
            {"malloc_slice", 544},
            {"poc_ref_pic_reorder", 545},
            {"set_ref_pic_num", 546},
            {"free_slice_list", 547},
            {"free_slice", 548},
            {"modify_redundant_pic_cnt", 549},
            {"Mode_Decision_for_new_Intra8x8Macroblock", 550},
            {"Mode_Decision_for_new_8x8IntraBlocks", 551},
            {"intrapred_luma8x8", 552},
            {"RDCost_for_8x8IntraBlocks", 553},
            {"dct_luma8x8", 554},
            {"LowPassForIntra8x8Pred", 555},
            {"ue_v", 556},
            {"ue_linfo", 557},
            {"writeSyntaxElement_UVLC", 558},
            {"symbol2uvlc", 559},
            {"writeUVLC2buffer", 560},
            {"se_v", 561},
            {"se_linfo", 562},
            {"u_1", 563},
            {"writeSyntaxElement_fixed", 564},
            {"u_v", 565},
            {"cbp_linfo_intra", 566},
            {"cbp_linfo_inter", 567},
            {"levrun_linfo_c2x2", 568},
            {"levrun_linfo_inter", 569},
            {"levrun_linfo_intra", 570},
            {"writeSyntaxElement_Intra4x4PredictionMode", 571},
            {"writeSyntaxElement2Buf_UVLC", 572},
            {"writeSyntaxElement2Buf_Fixed", 573},
            {"symbol2vlc", 574},
            {"writeSyntaxElement_VLC", 575},
            {"writeSyntaxElement_NumCoeffTrailingOnes", 576},
            {"writeSyntaxElement_NumCoeffTrailingOnesChromaDC", 577},
            {"writeSyntaxElement_TotalZeros", 578},
            {"writeSyntaxElement_TotalZerosChromaDC", 579},
            {"writeSyntaxElement_Run", 580},
            {"writeSyntaxElement_Level_VLC1", 581},
            {"writeSyntaxElement_Level_VLCN", 582},
            {"writeVlcByteAlign", 583},
            {"estimate_weighting_factor_P_slice", 584},
            {"estimate_weighting_factor_B_slice", 585},
            {"test_wp_P_slice", 586},
            {"test_wp_B_slice", 587},
            {"spec_srand", 588},
            {"spec_rand", 589},
            {"localtime", 590},
            {"__ctype_b_loc", 591},
            {"llvm.dbg.declare", 592},
            {"fopen", 593},
            {"printf", 594},
            {"exit", 595},
            {"fclose", 596},
            {"calloc", 597},
            {"snprintf", 598},
            {"free", 599},
            {"abs", 600},
            {"pow", 601},
            {"llvm.fmuladd.f64", 602},
            {"fprintf", 603},
            {"strncmp", 604},
            {"strlen", 605},
            {"malloc", 606},
            {"open", 607},
            {"__isoc99_fscanf", 608},
            {"strcmp", 609},
            {"__isoc99_sscanf", 610},
            {"strncpy", 611},
            {"fseek", 612},
            {"ftell", 613},
            {"fread", 614},
            {"log10", 615},
            {"llvm.dbg.label", 616},
            {"log", 617},
            {"llvm.ceil.f64", 618},
            {"llvm.fmuladd.f32", 619},
            {"lseek", 620},
            {"read", 621},
            {"fputc", 622},
            {"close", 623},
            {"strcpy", 624},
            {"strncat", 625},
            {"time", 626},
            {"strftime", 627},
            {"sprintf", 628},
            {"qsort", 629},
            {"llvm.floor.f64", 630},
            {"write", 631},
            {"sqrt", 632},
            {"llvm.fabs.f64", 633},
            {"fwrite", 634},
            {"llvm.dbg.value", 635},
            {"llvm.memcpy.p0.p0.i64", 636},
            {"llvm.memset.p0.i64", 637}
        };

        // Graph Representation: Vector of (caller, callee) pairs
        const std::vector<EdgeT> graph = {
            {1, 593},
            {1, 594},
            {1, 595},
            {2, 594},
            {2, 595},
            {2, 596},
            {3, 325},
            {3, 597},
            {4, 103},
            {4, 598},
            {4, 599},
            {12, 257},
            {13, 257},
            {14, 376},
            {14, 600},
            {15, 600},
            {15, 376},
            {16, 600},
            {16, 636},
            {16, 376},
            {17, 600},
            {17, 376},
            {18, 376},
            {18, 600},
            {19, 600},
            {19, 601},
            {19, 376},
            {19, 569},
            {19, 602},
            {20, 568},
            {20, 600},
            {20, 569},
            {20, 376},
            {20, 601},
            {20, 602},
            {21, 376},
            {21, 600},
            {23, 257},
            {24, 597},
            {24, 325},
            {25, 597},
            {25, 325},
            {26, 599},
            {27, 599},
            {28, 6},
            {29, 8},
            {30, 8},
            {31, 8},
            {32, 8},
            {32, 10},
            {32, 595},
            {32, 594},
            {33, 8},
            {34, 8},
            {35, 8},
            {35, 258},
            {35, 36},
            {36, 8},
            {37, 8},
            {37, 600},
            {37, 36},
            {38, 8},
            {38, 9},
            {38, 258},
            {38, 39},
            {39, 8},
            {39, 40},
            {40, 9},
            {41, 8},
            {41, 42},
            {42, 8},
            {43, 8},
            {43, 258},
            {44, 8},
            {44, 43},
            {45, 8},
            {45, 258},
            {45, 259},
            {46, 8},
            {47, 8},
            {47, 9},
            {47, 48},
            {48, 8},
            {48, 40},
            {49, 45},
            {49, 46},
            {49, 47},
            {50, 603},
            {50, 595},
            {51, 325},
            {51, 637},
            {51, 103},
            {51, 594},
            {51, 50},
            {51, 52},
            {51, 55},
            {51, 54},
            {51, 599},
            {51, 598},
            {51, 53},
            {51, 56},
            {51, 604},
            {51, 605},
            {51, 606},
            {53, 612},
            {53, 613},
            {53, 325},
            {53, 614},
            {53, 593},
            {53, 596},
            {53, 598},
            {53, 606},
            {54, 609},
            {54, 610},
            {54, 611},
            {54, 103},
            {54, 594},
            {54, 598},
            {54, 636},
            {54, 61},
            {55, 608},
            {55, 325},
            {55, 103},
            {55, 593},
            {55, 594},
            {55, 596},
            {55, 598},
            {55, 57},
            {55, 58},
            {55, 59},
            {55, 60},
            {55, 605},
            {55, 606},
            {55, 607},
            {56, 594},
            {57, 598},
            {57, 103},
            {59, 598},
            {59, 103},
            {61, 609},
            {63, 325},
            {63, 606},
            {63, 615},
            {64, 599},
            {66, 11},
            {67, 602},
            {68, 67},
            {69, 68},
            {71, 72},
            {72, 73},
            {75, 76},
            {75, 77},
            {75, 78},
            {76, 589},
            {77, 79},
            {78, 636},
            {79, 72},
            {81, 80},
            {82, 83},
            {82, 325},
            {82, 606},
            {83, 83},
            {84, 325},
            {84, 597},
            {85, 599},
            {86, 610},
            {86, 103},
            {86, 591},
            {86, 598},
            {86, 605},
            {87, 136},
            {87, 187},
            {88, 325},
            {88, 597},
            {89, 90},
            {91, 597},
            {91, 325},
            {92, 597},
            {92, 325},
            {93, 325},
            {93, 331},
            {93, 332},
            {93, 597},
            {93, 91},
            {93, 92},
            {94, 599},
            {95, 599},
            {96, 338},
            {96, 339},
            {96, 599},
            {96, 94},
            {96, 95},
            {98, 600},
            {98, 97},
            {98, 602},
            {98, 637},
            {99, 361},
            {100, 600},
            {100, 602},
            {100, 99},
            {100, 637},
            {103, 312},
            {103, 603},
            {103, 595},
            {104, 405},
            {104, 383},
            {105, 1},
            {105, 103},
            {105, 104},
            {105, 487},
            {105, 401},
            {105, 598},
            {105, 383},
            {106, 488},
            {106, 2},
            {106, 598},
            {106, 103},
            {107, 108},
            {107, 109},
            {108, 103},
            {108, 110},
            {108, 111},
            {108, 112},
            {108, 113},
            {108, 594},
            {108, 595},
            {108, 114},
            {108, 115},
            {108, 116},
            {108, 599},
            {108, 637},
            {108, 606},
            {109, 594},
            {109, 595},
            {109, 606},
            {109, 599},
            {117, 599},
            {118, 119},
            {119, 120},
            {122, 120},
            {123, 120},
            {124, 120},
            {125, 120},
            {125, 122},
            {127, 126},
            {128, 129},
            {128, 130},
            {128, 131},
            {128, 132},
            {128, 617},
            {128, 618},
            {128, 556},
            {128, 561},
            {128, 563},
            {128, 565},
            {129, 103},
            {130, 563},
            {130, 556},
            {131, 561},
            {131, 563},
            {131, 556},
            {132, 563},
            {132, 556},
            {132, 103},
            {133, 558},
            {134, 254},
            {135, 416},
            {135, 420},
            {135, 421},
            {135, 134},
            {135, 107},
            {135, 173},
            {135, 205},
            {135, 118},
            {135, 121},
            {135, 127},
            {135, 125},
            {135, 542},
            {135, 415},
            {136, 137},
            {136, 266},
            {136, 139},
            {136, 140},
            {136, 138},
            {136, 142},
            {136, 143},
            {136, 141},
            {136, 144},
            {136, 145},
            {136, 147},
            {136, 148},
            {136, 149},
            {136, 150},
            {136, 151},
            {136, 152},
            {136, 153},
            {136, 154},
            {136, 155},
            {136, 156},
            {136, 547},
            {136, 292},
            {136, 426},
            {136, 428},
            {136, 429},
            {136, 431},
            {136, 434},
            {136, 317},
            {136, 70},
            {136, 146},
            {136, 103},
            {136, 104},
            {138, 530},
            {138, 522},
            {138, 165},
            {140, 164},
            {140, 325},
            {140, 103},
            {140, 202},
            {140, 620},
            {140, 621},
            {140, 594},
            {140, 595},
            {140, 598},
            {140, 599},
            {140, 606},
            {142, 160},
            {142, 162},
            {142, 163},
            {142, 292},
            {142, 135},
            {142, 426},
            {142, 267},
            {142, 430},
            {142, 431},
            {142, 157},
            {142, 158},
            {143, 160},
            {143, 161},
            {143, 267},
            {143, 135},
            {144, 474},
            {144, 586},
            {144, 587},
            {144, 143},
            {145, 601},
            {145, 204},
            {146, 137},
            {147, 159},
            {148, 137},
            {148, 157},
            {148, 158},
            {149, 619},
            {149, 615},
            {150, 594},
            {151, 594},
            {152, 594},
            {153, 594},
            {154, 594},
            {155, 594},
            {156, 594},
            {159, 636},
            {159, 382},
            {159, 383},
            {161, 600},
            {163, 161},
            {163, 203},
            {164, 384},
            {164, 636},
            {164, 103},
            {166, 482},
            {166, 325},
            {166, 327},
            {166, 167},
            {166, 475},
            {166, 606},
            {167, 482},
            {167, 476},
            {169, 170},
            {171, 589},
            {171, 588},
            {171, 325},
            {171, 606},
            {174, 599},
            {175, 608},
            {175, 593},
            {175, 594},
            {175, 596},
            {176, 622},
            {177, 103},
            {177, 176},
            {177, 593},
            {177, 594},
            {177, 596},
            {177, 598},
            {179, 325},
            {179, 175},
            {179, 177},
            {179, 178},
            {179, 594},
            {179, 597},
            {179, 599},
            {179, 603},
            {180, 388},
            {180, 389},
            {180, 262},
            {180, 263},
            {180, 136},
            {180, 395},
            {180, 400},
            {180, 414},
            {180, 439},
            {180, 419},
            {180, 424},
            {180, 425},
            {180, 187},
            {180, 174},
            {180, 51},
            {180, 179},
            {180, 181},
            {180, 182},
            {180, 183},
            {180, 312},
            {180, 440},
            {180, 184},
            {180, 185},
            {180, 186},
            {180, 188},
            {180, 190},
            {180, 63},
            {180, 192},
            {180, 62},
            {180, 322},
            {180, 191},
            {180, 64},
            {180, 189},
            {180, 82},
            {180, 84},
            {180, 85},
            {180, 86},
            {180, 596},
            {180, 87},
            {180, 89},
            {180, 357},
            {180, 358},
            {180, 105},
            {180, 106},
            {180, 623},
            {180, 117},
            {180, 379},
            {180, 380},
            {182, 325},
            {182, 198},
            {182, 199},
            {182, 200},
            {182, 201},
            {182, 489},
            {182, 171},
            {182, 332},
            {182, 335},
            {182, 597},
            {183, 597},
            {183, 325},
            {184, 197},
            {184, 325},
            {184, 327},
            {184, 328},
            {184, 422},
            {184, 331},
            {184, 332},
            {184, 335},
            {184, 337},
            {184, 597},
            {184, 345},
            {184, 346},
            {184, 93},
            {184, 606},
            {185, 594},
            {185, 636},
            {187, 103},
            {187, 590},
            {187, 593},
            {187, 626},
            {187, 627},
            {187, 596},
            {187, 598},
            {187, 603},
            {187, 605},
            {189, 624},
            {189, 625},
            {189, 593},
            {189, 596},
            {189, 598},
            {189, 603},
            {189, 605},
            {190, 547},
            {190, 599},
            {191, 96},
            {191, 196},
            {191, 423},
            {191, 329},
            {191, 330},
            {191, 339},
            {191, 342},
            {191, 599},
            {191, 344},
            {191, 348},
            {191, 349},
            {192, 193},
            {192, 194},
            {192, 195},
            {192, 339},
            {192, 599},
            {192, 505},
            {193, 599},
            {194, 599},
            {195, 599},
            {196, 329},
            {196, 330},
            {196, 326},
            {196, 599},
            {197, 324},
            {197, 325},
            {197, 327},
            {197, 328},
            {197, 597},
            {198, 597},
            {198, 325},
            {199, 597},
            {199, 325},
            {200, 597},
            {200, 325},
            {202, 389},
            {202, 263},
            {202, 400},
            {202, 174},
            {202, 179},
            {202, 439},
            {202, 312},
            {202, 187},
            {202, 189},
            {202, 190},
            {202, 191},
            {202, 64},
            {202, 192},
            {202, 322},
            {202, 596},
            {202, 85},
            {202, 358},
            {202, 106},
            {202, 623},
            {202, 117},
            {202, 380},
            {203, 636},
            {204, 602},
            {205, 206},
            {206, 207},
            {206, 208},
            {206, 252},
            {206, 636},
            {206, 254},
            {207, 600},
            {207, 257},
            {207, 253},
            {208, 600},
            {208, 257},
            {208, 636},
            {209, 253},
            {213, 353},
            {213, 431},
            {213, 209},
            {213, 434},
            {213, 23},
            {213, 123},
            {213, 252},
            {214, 103},
            {214, 598},
            {214, 215},
            {214, 120},
            {214, 123},
            {214, 124},
            {215, 6},
            {216, 481},
            {218, 216},
            {218, 210},
            {219, 216},
            {219, 210},
            {220, 554},
            {220, 15},
            {220, 19},
            {220, 21},
            {220, 218},
            {220, 221},
            {221, 211},
            {221, 222},
            {221, 223},
            {225, 224},
            {225, 220},
            {225, 21},
            {226, 224},
            {226, 361},
            {226, 218},
            {226, 362},
            {227, 224},
            {227, 16},
            {227, 20},
            {227, 636},
            {227, 221},
            {228, 257},
            {228, 636},
            {228, 361},
            {230, 229},
            {231, 571},
            {233, 230},
            {233, 231},
            {233, 232},
            {233, 234},
            {233, 459},
            {233, 236},
            {233, 237},
            {233, 235},
            {233, 23},
            {233, 573},
            {234, 245},
            {234, 244},
            {234, 229},
            {236, 241},
            {236, 573},
            {236, 238},
            {237, 636},
            {237, 238},
            {238, 576},
            {238, 577},
            {238, 578},
            {238, 579},
            {238, 580},
            {238, 581},
            {238, 582},
            {238, 103},
            {238, 239},
            {238, 240},
            {238, 594},
            {238, 595},
            {238, 628},
            {238, 600},
            {238, 636},
            {238, 575},
            {239, 258},
            {240, 259},
            {240, 636},
            {241, 242},
            {241, 243},
            {241, 238},
            {244, 573},
            {244, 246},
            {247, 10},
            {249, 248},
            {249, 233},
            {249, 247},
            {250, 600},
            {250, 257},
            {252, 251},
            {254, 253},
            {255, 254},
            {256, 254},
            {257, 256},
            {257, 103},
            {257, 255},
            {258, 257},
            {259, 257},
            {261, 103},
            {262, 261},
            {262, 325},
            {262, 263},
            {262, 103},
            {262, 264},
            {262, 597},
            {263, 265},
            {263, 599},
            {264, 325},
            {264, 597},
            {265, 266},
            {265, 599},
            {266, 350},
            {266, 329},
            {266, 330},
            {266, 338},
            {266, 599},
            {266, 349},
            {266, 343},
            {267, 325},
            {267, 327},
            {267, 328},
            {267, 331},
            {267, 336},
            {267, 597},
            {267, 346},
            {267, 347},
            {270, 325},
            {270, 274},
            {270, 597},
            {270, 629},
            {270, 599},
            {281, 282},
            {281, 283},
            {281, 103},
            {282, 285},
            {283, 284},
            {286, 287},
            {288, 289},
            {290, 291},
            {292, 288},
            {292, 260},
            {292, 293},
            {292, 294},
            {292, 295},
            {292, 296},
            {292, 297},
            {292, 394},
            {292, 298},
            {292, 299},
            {292, 103},
            {292, 286},
            {293, 288},
            {293, 264},
            {293, 265},
            {293, 312},
            {293, 286},
            {294, 288},
            {294, 290},
            {294, 599},
            {294, 103},
            {294, 306},
            {294, 307},
            {294, 308},
            {294, 309},
            {294, 310},
            {294, 311},
            {294, 312},
            {294, 286},
            {295, 304},
            {295, 305},
            {295, 166},
            {295, 303},
            {296, 302},
            {296, 286},
            {297, 300},
            {297, 301},
            {298, 103},
            {299, 103},
            {299, 393},
            {299, 298},
            {299, 300},
            {299, 301},
            {301, 266},
            {301, 103},
            {302, 329},
            {302, 599},
            {303, 267},
            {303, 636},
            {303, 166},
            {304, 267},
            {304, 636},
            {304, 166},
            {306, 315},
            {306, 302},
            {307, 291},
            {308, 103},
            {308, 313},
            {308, 314},
            {308, 315},
            {308, 316},
            {309, 302},
            {309, 286},
            {310, 290},
            {311, 313},
            {311, 314},
            {312, 297},
            {312, 299},
            {312, 302},
            {313, 291},
            {314, 291},
            {316, 594},
            {317, 288},
            {317, 166},
            {317, 103},
            {317, 266},
            {317, 303},
            {317, 286},
            {318, 597},
            {318, 325},
            {319, 599},
            {320, 267},
            {320, 292},
            {321, 325},
            {321, 331},
            {321, 336},
            {321, 597},
            {321, 346},
            {321, 347},
            {322, 338},
            {322, 343},
            {322, 599},
            {322, 349},
            {322, 350},
            {323, 600},
            {324, 325},
            {324, 597},
            {325, 598},
            {325, 103},
            {326, 599},
            {327, 325},
            {327, 597},
            {328, 597},
            {328, 325},
            {328, 327},
            {329, 599},
            {329, 103},
            {330, 329},
            {330, 103},
            {330, 599},
            {331, 597},
            {331, 325},
            {332, 597},
            {332, 325},
            {333, 597},
            {333, 325},
            {334, 331},
            {334, 325},
            {334, 597},
            {335, 597},
            {335, 332},
            {335, 325},
            {336, 325},
            {336, 597},
            {336, 333},
            {337, 597},
            {337, 325},
            {337, 335},
            {338, 599},
            {338, 103},
            {339, 103},
            {339, 599},
            {340, 599},
            {340, 103},
            {341, 338},
            {341, 599},
            {341, 103},
            {342, 339},
            {342, 599},
            {342, 103},
            {343, 103},
            {343, 340},
            {343, 599},
            {344, 103},
            {344, 342},
            {344, 599},
            {345, 325},
            {345, 597},
            {346, 345},
            {346, 325},
            {346, 597},
            {347, 346},
            {347, 597},
            {347, 325},
            {348, 599},
            {348, 103},
            {349, 348},
            {349, 103},
            {349, 599},
            {350, 103},
            {350, 349},
            {350, 599},
            {351, 325},
            {351, 606},
            {352, 599},
            {355, 354},
            {355, 356},
            {356, 258},
            {356, 636},
            {357, 325},
            {357, 617},
            {357, 618},
            {357, 337},
            {357, 597},
            {357, 630},
            {357, 351},
            {358, 344},
            {358, 352},
            {358, 599},
            {359, 602},
            {360, 602},
            {360, 355},
            {363, 361},
            {363, 362},
            {364, 361},
            {364, 602},
            {364, 363},
            {365, 602},
            {366, 361},
            {366, 602},
            {366, 363},
            {367, 361},
            {367, 362},
            {367, 219},
            {368, 98},
            {368, 100},
            {368, 356},
            {368, 360},
            {368, 364},
            {368, 365},
            {368, 366},
            {368, 369},
            {368, 370},
            {368, 630},
            {368, 602},
            {369, 258},
            {369, 356},
            {370, 218},
            {370, 362},
            {370, 361},
            {371, 361},
            {371, 218},
            {371, 362},
            {372, 361},
            {372, 218},
            {372, 362},
            {373, 372},
            {374, 368},
            {375, 258},
            {375, 356},
            {375, 637},
            {379, 380},
            {379, 597},
            {380, 599},
            {381, 378},
            {381, 636},
            {382, 325},
            {382, 597},
            {383, 599},
            {385, 384},
            {385, 636},
            {385, 637},
            {385, 103},
            {386, 387},
            {387, 385},
            {387, 325},
            {387, 599},
            {387, 631},
            {387, 636},
            {387, 606},
            {388, 264},
            {389, 265},
            {390, 637},
            {391, 304},
            {391, 386},
            {391, 267},
            {391, 390},
            {392, 266},
            {392, 391},
            {393, 392},
            {393, 386},
            {393, 391},
            {394, 392},
            {394, 266},
            {394, 304},
            {394, 386},
            {395, 396},
            {395, 397},
            {395, 407},
            {395, 408},
            {395, 636},
            {396, 321},
            {396, 103},
            {396, 398},
            {396, 399},
            {396, 636},
            {397, 594},
            {397, 398},
            {400, 410},
            {401, 402},
            {401, 381},
            {401, 382},
            {402, 325},
            {402, 556},
            {402, 561},
            {402, 563},
            {402, 403},
            {402, 565},
            {402, 597},
            {402, 599},
            {402, 404},
            {402, 377},
            {403, 561},
            {404, 563},
            {404, 594},
            {404, 595},
            {404, 565},
            {405, 382},
            {405, 381},
            {405, 406},
            {406, 325},
            {406, 556},
            {406, 398},
            {406, 561},
            {406, 563},
            {406, 403},
            {406, 565},
            {406, 597},
            {406, 599},
            {406, 377},
            {407, 597},
            {407, 325},
            {408, 597},
            {408, 325},
            {409, 599},
            {410, 599},
            {411, 609},
            {412, 609},
            {412, 610},
            {412, 103},
            {412, 594},
            {412, 598},
            {412, 411},
            {413, 594},
            {413, 636},
            {414, 605},
            {414, 594},
            {414, 53},
            {414, 599},
            {414, 412},
            {414, 637},
            {414, 413},
            {415, 637},
            {416, 637},
            {417, 609},
            {418, 609},
            {418, 417},
            {418, 610},
            {418, 103},
            {418, 594},
            {418, 598},
            {419, 418},
            {419, 594},
            {419, 53},
            {419, 599},
            {419, 605},
            {422, 597},
            {422, 325},
            {423, 599},
            {425, 630},
            {426, 602},
            {426, 630},
            {427, 600},
            {429, 630},
            {431, 432},
            {431, 602},
            {431, 632},
            {432, 433},
            {434, 433},
            {434, 435},
            {434, 436},
            {434, 437},
            {434, 632},
            {434, 633},
            {434, 602},
            {436, 633},
            {436, 602},
            {437, 632},
            {437, 633},
            {437, 602},
            {437, 438},
            {438, 633},
            {438, 602},
            {439, 194},
            {439, 195},
            {439, 469},
            {440, 200},
            {440, 470},
            {440, 199},
            {443, 238},
            {443, 15},
            {443, 242},
            {443, 471},
            {443, 472},
            {443, 602},
            {443, 571},
            {444, 472},
            {444, 17},
            {444, 238},
            {444, 471},
            {445, 258},
            {445, 361},
            {445, 12},
            {445, 15},
            {445, 17},
            {445, 630},
            {445, 471},
            {445, 472},
            {445, 633},
            {445, 602},
            {445, 443},
            {445, 444},
            {446, 602},
            {446, 445},
            {446, 630},
            {447, 446},
            {448, 444},
            {448, 6},
            {448, 71},
            {448, 232},
            {448, 43},
            {448, 557},
            {448, 80},
            {448, 241},
            {448, 244},
            {448, 245},
            {448, 602},
            {448, 220},
            {450, 594},
            {450, 595},
            {451, 16},
            {451, 250},
            {451, 13},
            {451, 14},
            {452, 453},
            {452, 454},
            {453, 456},
            {454, 455},
            {455, 103},
            {456, 103},
            {457, 103},
            {458, 225},
            {458, 450},
            {458, 227},
            {458, 451},
            {458, 452},
            {458, 550},
            {458, 449},
            {458, 233},
            {458, 74},
            {458, 459},
            {458, 557},
            {458, 81},
            {458, 18},
            {458, 471},
            {458, 472},
            {458, 602},
            {458, 447},
            {461, 457},
            {461, 454},
            {464, 361},
            {464, 362},
            {465, 13},
            {465, 14},
            {465, 16},
            {465, 18},
            {465, 550},
            {465, 427},
            {465, 172},
            {465, 442},
            {465, 447},
            {465, 448},
            {465, 449},
            {465, 450},
            {465, 452},
            {465, 457},
            {465, 458},
            {465, 459},
            {465, 460},
            {465, 461},
            {465, 462},
            {465, 463},
            {465, 464},
            {465, 466},
            {465, 471},
            {465, 472},
            {465, 601},
            {465, 602},
            {465, 220},
            {465, 375},
            {465, 225},
            {465, 226},
            {465, 227},
            {465, 228},
            {465, 101},
            {465, 102},
            {465, 232},
            {465, 367},
            {465, 369},
            {465, 371},
            {465, 372},
            {465, 373},
            {465, 630},
            {465, 374},
            {465, 632},
            {465, 250},
            {467, 471},
            {468, 472},
            {469, 26},
            {469, 27},
            {469, 599},
            {470, 24},
            {470, 25},
            {470, 325},
            {470, 597},
            {471, 636},
            {472, 636},
            {473, 602},
            {474, 601},
            {474, 473},
            {483, 636},
            {484, 634},
            {485, 483},
            {485, 484},
            {485, 325},
            {485, 594},
            {485, 595},
            {485, 599},
            {485, 636},
            {485, 606},
            {487, 593},
            {487, 594},
            {487, 595},
            {488, 596},
            {489, 325},
            {489, 490},
            {489, 491},
            {489, 492},
            {489, 493},
            {489, 494},
            {489, 495},
            {489, 496},
            {489, 497},
            {489, 498},
            {489, 606},
            {490, 637},
            {491, 504},
            {491, 325},
            {491, 637},
            {491, 606},
            {492, 325},
            {492, 606},
            {492, 503},
            {494, 637},
            {494, 325},
            {494, 606},
            {495, 325},
            {495, 606},
            {495, 502},
            {496, 325},
            {496, 501},
            {496, 606},
            {497, 500},
            {497, 325},
            {497, 606},
            {498, 499},
            {498, 325},
            {498, 606},
            {499, 637},
            {500, 637},
            {501, 637},
            {502, 637},
            {503, 637},
            {504, 599},
            {505, 512},
            {505, 599},
            {505, 504},
            {505, 506},
            {505, 507},
            {505, 508},
            {505, 509},
            {505, 510},
            {505, 511},
            {507, 599},
            {508, 599},
            {509, 599},
            {510, 599},
            {511, 599},
            {512, 599},
            {514, 636},
            {518, 516},
            {518, 572},
            {519, 572},
            {520, 516},
            {520, 325},
            {520, 599},
            {520, 572},
            {520, 637},
            {520, 606},
            {521, 325},
            {521, 637},
            {521, 606},
            {523, 572},
            {523, 573},
            {524, 637},
            {525, 599},
            {528, 572},
            {528, 573},
            {529, 572},
            {529, 573},
            {532, 572},
            {534, 573},
            {536, 573},
            {538, 572},
            {538, 573},
            {540, 128},
            {540, 66},
            {540, 133},
            {540, 486},
            {540, 583},
            {540, 5},
            {540, 201},
            {540, 22},
            {541, 69},
            {541, 7},
            {541, 247},
            {541, 377},
            {541, 378},
            {542, 65},
            {542, 541},
            {542, 103},
            {542, 169},
            {542, 465},
            {542, 212},
            {542, 213},
            {542, 598},
            {542, 214},
            {542, 120},
            {542, 249},
            {542, 122},
            {542, 123},
            {542, 124},
            {542, 540},
            {542, 126},
            {542, 543},
            {543, 544},
            {543, 545},
            {543, 546},
            {543, 323},
            {543, 103},
            {543, 584},
            {543, 585},
            {543, 88},
            {543, 270},
            {543, 280},
            {543, 281},
            {543, 539},
            {543, 318},
            {544, 24},
            {544, 25},
            {544, 597},
            {544, 325},
            {545, 600},
            {547, 548},
            {548, 26},
            {548, 27},
            {548, 599},
            {550, 602},
            {550, 630},
            {550, 551},
            {551, 258},
            {551, 552},
            {551, 553},
            {551, 554},
            {551, 362},
            {551, 17},
            {551, 467},
            {551, 468},
            {551, 630},
            {551, 602},
            {551, 444},
            {552, 257},
            {552, 555},
            {553, 554},
            {553, 238},
            {553, 243},
            {553, 602},
            {553, 571},
            {554, 376},
            {554, 600},
            {556, 558},
            {557, 601},
            {558, 560},
            {558, 559},
            {561, 558},
            {562, 600},
            {562, 601},
            {563, 564},
            {564, 560},
            {565, 564},
            {566, 557},
            {567, 557},
            {568, 600},
            {568, 601},
            {568, 636},
            {569, 600},
            {569, 601},
            {569, 636},
            {570, 600},
            {570, 601},
            {570, 636},
            {571, 560},
            {572, 560},
            {572, 559},
            {573, 560},
            {575, 560},
            {575, 574},
            {576, 560},
            {576, 594},
            {576, 595},
            {576, 574},
            {577, 560},
            {577, 594},
            {577, 595},
            {577, 574},
            {578, 560},
            {578, 594},
            {578, 595},
            {578, 574},
            {579, 560},
            {579, 594},
            {579, 595},
            {579, 574},
            {580, 560},
            {580, 594},
            {580, 595},
            {580, 574},
            {581, 560},
            {581, 600},
            {581, 574},
            {582, 560},
            {582, 600},
            {582, 574},
            {585, 600},
            {587, 600},
            {590, 606},
            {591, 606}
        };

        const unsigned int graph_size = 1437;
    
    public:
        inline const std::vector<EdgeT>& getGraph() const {
            return graph;
        }

        inline const std::map<FuncDataT, NodeIdT>& getNodeMap() const {
            return node_map;
        }

        inline unsigned int getGraphSize() const {
            return graph_size;
        }
    };


    class PointerGraph : public BaseGraphAPI<PtrDataT, PointerGraph> {
    private:
        // Mapping from NodeData to ID
        const std::map<PtrDataT, NodeIdT> node_map = {
            
        };
        
        // Graph Representation: Vector of (pointer, pointee) pairs
        const std::vector<EdgeT> graph = {
            
        };

        const unsigned int graph_size = 0;
    
    public:
        inline const std::vector<EdgeT>& getGraph() const {
            return graph;
        }

        inline const std::map<PtrDataT, NodeIdT>& getNodeMap() const {
            return node_map;
        }

        inline unsigned int getGraphSize() const {
            return graph_size;
        }
    };
} // namespace PointerGraph

#endif // PTA_GRAPHS_HPP
